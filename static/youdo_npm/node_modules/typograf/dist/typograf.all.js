/*! typograf | Â© 2019 Denis Seleznev | MIT  License | https://github.com/typograf/typograf */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Typograf = factory());
}(this, (function () { 'use strict';

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var blockElements = ['address', 'article', 'aside', 'blockquote', 'canvas', 'dd', 'div', 'dl', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr', 'li', 'main', 'nav', 'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table', 'tfoot', 'ul', 'video'];

var inlineElements = ['a', 'abbr', 'acronym', 'b', 'bdo', 'big', 'br', 'button', 'cite', 'code', 'dfn', 'em', 'i', 'img', 'input', 'kbd', 'label', 'map', 'object', 'q', 'samp', 'script', 'select', 'small', 'span', 'strong', 'sub', 'sup', 'textarea', 'time', 'tt', 'var'];

var groupIndexes = {
  symbols: 110,
  space: 210,
  dash: 310,
  punctuation: 410,
  nbsp: 510,
  'number': 610,
  money: 710,
  date: 810,
  other: 910,
  optalign: 1010,
  typo: 1110,
  html: 1210
};

// http://www.w3.org/TR/html4/sgml/entities
var visibleEntities = [['iexcl', 161], ['cent', 162], ['pound', 163], ['curren', 164], ['yen', 165], ['brvbar', 166], ['sect', 167], ['uml', 168], ['copy', 169], ['ordf', 170], ['laquo', 171], ['not', 172], ['reg', 174], ['macr', 175], ['deg', 176], ['plusmn', 177], ['sup2', 178], ['sup3', 179], ['acute', 180], ['micro', 181], ['para', 182], ['middot', 183], ['cedil', 184], ['sup1', 185], ['ordm', 186], ['raquo', 187], ['frac14', 188], ['frac12', 189], ['frac34', 190], ['iquest', 191], ['Agrave', 192], ['Aacute', 193], ['Acirc', 194], ['Atilde', 195], ['Auml', 196], ['Aring', 197], ['AElig', 198], ['Ccedil', 199], ['Egrave', 200], ['Eacute', 201], ['Ecirc', 202], ['Euml', 203], ['Igrave', 204], ['Iacute', 205], ['Icirc', 206], ['Iuml', 207], ['ETH', 208], ['Ntilde', 209], ['Ograve', 210], ['Oacute', 211], ['Ocirc', 212], ['Otilde', 213], ['Ouml', 214], ['times', 215], ['Oslash', 216], ['Ugrave', 217], ['Uacute', 218], ['Ucirc', 219], ['Uuml', 220], ['Yacute', 221], ['THORN', 222], ['szlig', 223], ['agrave', 224], ['aacute', 225], ['acirc', 226], ['atilde', 227], ['auml', 228], ['aring', 229], ['aelig', 230], ['ccedil', 231], ['egrave', 232], ['eacute', 233], ['ecirc', 234], ['euml', 235], ['igrave', 236], ['iacute', 237], ['icirc', 238], ['iuml', 239], ['eth', 240], ['ntilde', 241], ['ograve', 242], ['oacute', 243], ['ocirc', 244], ['otilde', 245], ['ouml', 246], ['divide', 247], ['oslash', 248], ['ugrave', 249], ['uacute', 250], ['ucirc', 251], ['uuml', 252], ['yacute', 253], ['thorn', 254], ['yuml', 255], ['fnof', 402], ['Alpha', 913], ['Beta', 914], ['Gamma', 915], ['Delta', 916], ['Epsilon', 917], ['Zeta', 918], ['Eta', 919], ['Theta', 920], ['Iota', 921], ['Kappa', 922], ['Lambda', 923], ['Mu', 924], ['Nu', 925], ['Xi', 926], ['Omicron', 927], ['Pi', 928], ['Rho', 929], ['Sigma', 931], ['Tau', 932], ['Upsilon', 933], ['Phi', 934], ['Chi', 935], ['Psi', 936], ['Omega', 937], ['alpha', 945], ['beta', 946], ['gamma', 947], ['delta', 948], ['epsilon', 949], ['zeta', 950], ['eta', 951], ['theta', 952], ['iota', 953], ['kappa', 954], ['lambda', 955], ['mu', 956], ['nu', 957], ['xi', 958], ['omicron', 959], ['pi', 960], ['rho', 961], ['sigmaf', 962], ['sigma', 963], ['tau', 964], ['upsilon', 965], ['phi', 966], ['chi', 967], ['psi', 968], ['omega', 969], ['thetasym', 977], ['upsih', 978], ['piv', 982], ['bull', 8226], ['hellip', 8230], ['prime', 8242], ['Prime', 8243], ['oline', 8254], ['frasl', 8260], ['weierp', 8472], ['image', 8465], ['real', 8476], ['trade', 8482], ['alefsym', 8501], ['larr', 8592], ['uarr', 8593], ['rarr', 8594], ['darr', 8595], ['harr', 8596], ['crarr', 8629], ['lArr', 8656], ['uArr', 8657], ['rArr', 8658], ['dArr', 8659], ['hArr', 8660], ['forall', 8704], ['part', 8706], ['exist', 8707], ['empty', 8709], ['nabla', 8711], ['isin', 8712], ['notin', 8713], ['ni', 8715], ['prod', 8719], ['sum', 8721], ['minus', 8722], ['lowast', 8727], ['radic', 8730], ['prop', 8733], ['infin', 8734], ['ang', 8736], ['and', 8743], ['or', 8744], ['cap', 8745], ['cup', 8746], ['int', 8747], ['there4', 8756], ['sim', 8764], ['cong', 8773], ['asymp', 8776], ['ne', 8800], ['equiv', 8801], ['le', 8804], ['ge', 8805], ['sub', 8834], ['sup', 8835], ['nsub', 8836], ['sube', 8838], ['supe', 8839], ['oplus', 8853], ['otimes', 8855], ['perp', 8869], ['sdot', 8901], ['lceil', 8968], ['rceil', 8969], ['lfloor', 8970], ['rfloor', 8971], ['lang', 9001], ['rang', 9002], ['spades', 9824], ['clubs', 9827], ['hearts', 9829], ['diams', 9830], ['loz', 9674], ['OElig', 338], ['oelig', 339], ['Scaron', 352], ['scaron', 353], ['Yuml', 376], ['circ', 710], ['tilde', 732], ['ndash', 8211], ['mdash', 8212], ['lsquo', 8216], ['rsquo', 8217], ['sbquo', 8218], ['ldquo', 8220], ['rdquo', 8221], ['bdquo', 8222], ['dagger', 8224], ['Dagger', 8225], ['permil', 8240], ['lsaquo', 8249], ['rsaquo', 8250], ['euro', 8364], ['NestedGreaterGreater', 8811], ['NestedLessLess', 8810]];

var invisibleEntities = [['nbsp', 160], ['thinsp', 8201], ['ensp', 8194], ['emsp', 8195], ['shy', 173], ['zwnj', 8204], ['zwj', 8205], ['lrm', 8206], ['rlm', 8207]];

var HtmlEntities =
/*#__PURE__*/
function () {
  function HtmlEntities() {
    _classCallCheck(this, HtmlEntities);

    this._entities = this._prepareEntities([].concat(visibleEntities, invisibleEntities));
    this._entitiesByName = {};
    this._entitiesByNameEntity = {};
    this._entitiesByDigitEntity = {};
    this._entitiesByUtf = {};

    this._entities.forEach(function (entity) {
      this._entitiesByName[entity.name] = entity;
      this._entitiesByNameEntity[entity.nameEntity] = entity;
      this._entitiesByDigitEntity[entity.digitEntity] = entity;
      this._entitiesByUtf[entity.utf] = entity;
    }, this);

    this._invisibleEntities = this._prepareEntities(invisibleEntities);
  }
  /**
   * Entities as name or digit to UTF-8.
   *
   * @param {Object} context
   */


  _createClass(HtmlEntities, [{
    key: "toUtf",
    value: function toUtf(context) {
      var _this = this;

      if (context.text.search(/&#/) !== -1) {
        context.text = this.decHexToUtf(context.text);
      }

      if (context.text.search(/&[a-z]/i) !== -1) {
        // 2 - min length of entity without & and ;. Example: &DD;
        // 31 - max length of entity without & and ;. Example: &CounterClockwiseContourIntegral;
        context.text = context.text.replace(/&[a-z\d]{2,31};/gi, function (key) {
          var entity = _this._entitiesByNameEntity[key];
          return entity ? entity.utf : key;
        });
      }
    }
    /**
     * Entities in decimal or hexadecimal form to UTF-8.
     *
     * @param {string} text
     * @returns {string}
     */

  }, {
    key: "decHexToUtf",
    value: function decHexToUtf(text) {
      return text.replace(/&#(\d{1,6});/gi, function ($0, $1) {
        return String.fromCharCode(parseInt($1, 10));
      }).replace(/&#x([\da-f]{1,6});/gi, function ($0, $1) {
        return String.fromCharCode(parseInt($1, 16));
      });
    }
    /**
     * Restore HTML entities in text.
     *
     * @param {Object} context
     */

  }, {
    key: "restore",
    value: function restore(context) {
      var params = context.prefs.htmlEntity;
      var type = params.type;
      var entities = this._entities;

      if (type === 'name' || type === 'digit') {
        if (params.onlyInvisible || params.list) {
          entities = [];

          if (params.onlyInvisible) {
            entities = entities.concat(this._invisibleEntities);
          }

          if (params.list) {
            entities = entities.concat(this._prepareListParam(params.list));
          }
        }

        context.text = this._restoreEntitiesByIndex(context.text, type + 'Entity', entities);
      }
    }
    /**
     * Get a entity by utf using the type.
     *
     * @param {string} symbol
     * @param {string} [type]
     * @returns {string}
     */

  }, {
    key: "getByUtf",
    value: function getByUtf(symbol, type) {
      var result = '';

      switch (type) {
        case 'digit':
          result = this._entitiesByDigitEntity[symbol];
          break;

        case 'name':
          result = this._entitiesByNameEntity[symbol];
          break;

        default:
          result = symbol;
          break;
      }

      return result;
    }
  }, {
    key: "_prepareEntities",
    value: function _prepareEntities(entities) {
      var result = [];
      entities.forEach(function (entity) {
        var _entity = _slicedToArray(entity, 2),
            name = _entity[0],
            digit = _entity[1];

        var utf = String.fromCharCode(digit);
        result.push({
          name: name,
          nameEntity: '&' + name + ';',
          // &nbsp;
          digitEntity: '&#' + digit + ';',
          // &#160;
          utf: utf,
          // \u00A0
          reName: new RegExp('&' + name + ';', 'g'),
          reUtf: new RegExp(utf, 'g')
        });
      }, this);
      return result;
    }
  }, {
    key: "_prepareListParam",
    value: function _prepareListParam(list) {
      var result = [];
      list.forEach(function (name) {
        var entity = this._entitiesByName[name];

        if (entity) {
          result.push(entity);
        }
      }, this);
      return result;
    }
  }, {
    key: "_restoreEntitiesByIndex",
    value: function _restoreEntitiesByIndex(text, type, entities) {
      entities.forEach(function (entity) {
        text = text.replace(entity.reUtf, entity[type]);
      });
      return text;
    }
  }]);

  return HtmlEntities;
}();

var HtmlEntities$1 = new HtmlEntities();
/**
 * @typedef HtmlEntity
 *
 * @property {string} type - 'default' - UTF-8, 'digit' - &#160;, 'name' - &nbsp;
 * @property {boolean} [onlyInvisible]
 * @property {string[]} [list]
 */

var SafeTags =
/*#__PURE__*/
function () {
  function SafeTags() {
    _classCallCheck(this, SafeTags);

    var html = [['<!--', '-->'], ['<!ENTITY', '>'], ['<!DOCTYPE', '>'], ['<\\?xml', '\\?>'], ['<!\\[CDATA\\[', '\\]\\]>']];
    ['code', 'kbd', 'object', 'pre', 'samp', 'script', 'style', 'var'].forEach(function (tag) {
      html.push(['<' + tag + '(\\s[^>]*?)?>', '</' + tag + '>']);
    }, this);
    this._tags = {
      own: [],
      html: html.map(this._prepareRegExp),
      url: [Typograf._reUrl]
    };
    this._groups = ['own', 'html', 'url'];
  }
  /**
   * Add own safe tag.
   *
   * @param {RegExp|string[]} tag
   */


  _createClass(SafeTags, [{
    key: "add",
    value: function add(tag) {
      this._tags.own.push(this._prepareRegExp(tag));
    }
    /**
     * Show safe tags.
     *
     * @param {Object} context
     * @param {string} group
     */

  }, {
    key: "show",
    value: function show(context, group) {
      var label = Typograf._privateLabel;
      var reReplace = new RegExp(label + 'tf\\d+' + label, 'g');
      var reSearch = new RegExp(label + 'tf\\d');

      var replaceLabel = function replaceLabel(match) {
        return context.safeTags.hidden[group][match] || match;
      };

      for (var i = 0, len = this._tags[group].length; i < len; i++) {
        context.text = context.text.replace(reReplace, replaceLabel);

        if (context.text.search(reSearch) === -1) {
          break;
        }
      }
    }
    /**
     * Hide safe tags.
     *
     * @param {Object} context
     * @param {string} group
     */

  }, {
    key: "hide",
    value: function hide(context, group) {
      context.safeTags = context.safeTags || {
        hidden: {},
        i: 0
      };
      context.safeTags.hidden[group] = {};

      var pasteLabel = this._pasteLabel.bind(this, context, group);

      this._tags[group].forEach(function (tag) {
        context.text = context.text.replace(this._prepareRegExp(tag), pasteLabel);
      }, this);
    }
    /**
     * Hide HTML tags.
     *
     * @param {Object} context
     */

  }, {
    key: "hideHTMLTags",
    value: function hideHTMLTags(context) {
      if (context.isHTML) {
        var pasteLabel = this._pasteLabel.bind(this, context, 'html');

        context.text = context.text.replace(/<\/?[a-z][^]*?>/gi, pasteLabel) // Tags
        .replace(/&lt;\/?[a-z][^]*?&gt;/gi, pasteLabel) // Escaping tags
        .replace(/&[gl]t;/gi, pasteLabel);
      }
    }
    /**
     * Get previous label.
     *
     * @param {string} text
     * @param {number} position
     *
     * @returns {string|false}
     */

  }, {
    key: "getPrevLabel",
    value: function getPrevLabel(text, position) {
      for (var i = position - 1; i >= 0; i--) {
        if (text[i] === Typograf._privateLabel) {
          return text.slice(i, position + 1);
        }
      }

      return false;
    }
    /**
     * Get next label.
     *
     * @param {string} text
     * @param {number} position
     *
     * @returns {string|false}
     */

  }, {
    key: "getNextLabel",
    value: function getNextLabel(text, position) {
      for (var i = position + 1; i < text.length; i++) {
        if (text[i] === Typograf._privateLabel) {
          return text.slice(position, i + 1);
        }
      }

      return false;
    }
    /**
     * Get a tag by a label.
     *
     * @param {Object} context
     * @param {string} label
     *
     * @returns {Object|boolean}
     */

  }, {
    key: "getTagByLabel",
    value: function getTagByLabel(context, label) {
      var result = false;

      this._groups.some(function (group) {
        var value = context.safeTags.hidden[group][label];

        if (typeof value !== 'undefined') {
          result = {
            group: group,
            value: value
          };
        }

        return result;
      });

      return result;
    }
    /**
     * Get info about a tag.
     *
     * @param {Object|undefined} tag
     *
     * @returns {Object|undefined}
     */

  }, {
    key: "getTagInfo",
    value: function getTagInfo(tag) {
      if (!tag) {
        return;
      }

      var result = {
        group: tag.group
      };

      switch (tag.group) {
        case 'html':
          result.name = tag.value.split(/[<\s>]/)[1];
          result.isInline = inlineElements.indexOf(result.name) > -1;
          result.isClosing = tag.value.search(/^<\//) > -1;
          break;

        case 'url':
          result.isInline = true;
          break;

        case 'own':
          result.isInline = false;
          break;
      }

      return result;
    }
  }, {
    key: "_pasteLabel",
    value: function _pasteLabel(context, group, match) {
      var safeTags = context.safeTags;
      var key = Typograf._privateLabel + 'tf' + safeTags.i + Typograf._privateLabel;
      safeTags.hidden[group][key] = match;
      safeTags.i++;
      return key;
    }
  }, {
    key: "_prepareRegExp",
    value: function _prepareRegExp(tag) {
      var re;

      if (tag instanceof RegExp) {
        re = tag;
      } else {
        var _tag = _slicedToArray(tag, 3),
            startTag = _tag[0],
            endTag = _tag[1],
            middle = _tag[2];

        if (typeof middle === 'undefined') {
          middle = '[^]*?';
        }

        re = new RegExp(startTag + middle + endTag, 'gi');
      }

      return re;
    }
  }]);

  return SafeTags;
}();

/**
 * @constructor
 * @param {Object} [prefs]
 * @param {string} [prefs.locale] Locale
 * @param {string} [prefs.lineEnding] Line ending. 'LF' (Unix), 'CR' (Mac) or 'CRLF' (Windows). Default: 'LF'.
 * @param {HtmlEntity} [prefs.htmlEntity]
 * @param {boolean} [prefs.live] Live mode
 * @param {string|string[]} [prefs.enableRule] Enable a rule
 * @param {string|string[]} [prefs.disableRule] Disable a rule
 */

var Typograf =
/*#__PURE__*/
function () {
  function Typograf(prefs) {
    _classCallCheck(this, Typograf);

    this._prefs = _typeof(prefs) === 'object' ? prefs : {};
    this._prefs.locale = Typograf._prepareLocale(this._prefs.locale);
    this._prefs.live = this._prefs.live || false;
    this._safeTags = new SafeTags();
    this._settings = {};
    this._enabledRules = {};
    this._innerRulesByQueues = {};
    this._innerRules = [].concat(this._innerRules);

    this._innerRules.forEach(function (rule) {
      var q = rule.queue || 'default';
      this._innerRulesByQueues[q] = this._innerRulesByQueues[q] || [];

      this._innerRulesByQueues[q].push(rule);
    }, this);

    this._rulesByQueues = {};
    this._rules = [].concat(this._rules);

    this._rules.forEach(function (rule) {
      var q = rule.queue || 'default';

      this._prepareRule(rule);

      this._rulesByQueues[q] = this._rulesByQueues[q] || [];

      this._rulesByQueues[q].push(rule);
    }, this);

    this._prefs.disableRule && this.disableRule(this._prefs.disableRule);
    this._prefs.enableRule && this.enableRule(this._prefs.enableRule);
    this._separatePartsTags = ['title', 'p', 'h[1-6]', 'select', 'legend'];
  }
  /**
   * Add a rule.
   *
   * @static
   * @param {Object} rule
   * @param {string} rule.name Name of rule
   * @param {Function} rule.handler Processing function
   * @param {number} [rule.index] Sorting index for rule
   * @param {boolean} [rule.disabled] Rule is disabled by default
   * @param {boolean} [rule.live] Live mode
   * @param {Object} [rule.settings] Settings for rule
   *
   * @returns {Typograf} this
   */


  _createClass(Typograf, [{
    key: "execute",

    /**
     * Execute typographical rules for text.
     *
     * @param {string} text
     * @param {Object} [prefs]
     * @param {string} [prefs.locale] Locale
     * @param {HtmlEntity} [prefs.htmlEntity] Type of HTML entities
     * @param {string} [prefs.lineEnding] Line ending. 'LF' (Unix), 'CR' (Mac) or 'CRLF' (Windows). Default: 'LF'.
     *
     * @returns {string}
     */
    value: function execute(text, prefs) {
      text = '' + text;

      if (!text) {
        return '';
      }

      var context = this._prepareContext(text);

      this._preparePrefs(context, prefs);

      return this._process(context);
    }
  }, {
    key: "_prepareContext",
    value: function _prepareContext(text) {
      return {
        text: text,
        isHTML: this._isHTML(text),
        prefs: Typograf.deepCopy(this._prefs),
        getData: function getData(key) {
          if (key === 'char') {
            return this.prefs.locale.map(function (item) {
              return Typograf.getData(item + '/' + key);
            }).join('');
          } else {
            return Typograf.getData(this.prefs.locale[0] + '/' + key);
          }
        }
      };
    }
  }, {
    key: "_preparePrefs",
    value: function _preparePrefs(context, prefs) {
      prefs = prefs || {};
      var contextPrefs = context.prefs;

      for (var _i = 0, _arr = ['htmlEntity', 'lineEnding', 'processingSeparateParts', 'ruleFilter']; _i < _arr.length; _i++) {
        var name = _arr[_i];

        if (name in prefs) {
          contextPrefs[name] = prefs[name];
        } else if (name in this._prefs) {
          contextPrefs[name] = this._prefs[name];
        }
      }

      contextPrefs.htmlEntity = contextPrefs.htmlEntity || {};
      contextPrefs.locale = Typograf._prepareLocale(prefs.locale, this._prefs.locale);
      var locale = contextPrefs.locale;
      var locale0 = locale[0];

      if (!locale.length || !locale0) {
        throw Error('Not defined the property "locale".');
      }

      if (!Typograf.hasLocale(locale0)) {
        throw Error('"' + locale0 + '" is not supported locale.');
      }
    }
  }, {
    key: "_isHTML",
    value: function _isHTML(text) {
      return text.search(/(<\/?[a-z]|<!|&[lg]t;)/i) !== -1;
    }
  }, {
    key: "_splitBySeparateParts",
    value: function _splitBySeparateParts(context) {
      if (!context.isHTML || context.prefs.processingSeparateParts === false) {
        return [context.text];
      }

      var text = [],
          label = Typograf._privateSeparateLabel,
          reTags = new RegExp('<(' + this._separatePartsTags.join('|') + ')(\\s[^>]*?)?>[^]*?</\\1>', 'gi');
      var position = 0;
      context.text.replace(reTags, function ($0, $1, $2, itemPosition) {
        if (position !== itemPosition) {
          text.push((position ? label : '') + context.text.slice(position, itemPosition) + label);
        }

        text.push($0);
        position = itemPosition + $0.length;
        return $0;
      });
      text.push(position ? label + context.text.slice(position, context.text.length) : context.text);
      return text;
    }
  }, {
    key: "_process",
    value: function _process(context) {
      context.text = this._removeCR(context.text);

      this._executeRules(context, 'start');

      this._safeTags.hide(context, 'own');

      this._executeRules(context, 'hide-safe-tags-own');

      this._safeTags.hide(context, 'html');

      this._executeRules(context, 'hide-safe-tags-html');

      var isHTML = context.isHTML,
          re = new RegExp(Typograf._privateSeparateLabel, 'g');
      context.text = this._splitBySeparateParts(context).map(function (item) {
        context.text = item;
        context.isHTML = this._isHTML(item);

        this._safeTags.hideHTMLTags(context);

        this._safeTags.hide(context, 'url');

        this._executeRules(context, 'hide-safe-tags-url');

        this._executeRules(context, 'hide-safe-tags');

        Typograf.HtmlEntities.toUtf(context);

        if (this._prefs.live) {
          context.text = Typograf._replaceNbsp(context.text);
        }

        this._executeRules(context, 'utf');

        this._executeRules(context);

        Typograf.HtmlEntities.restore(context);

        this._executeRules(context, 'html-entities');

        this._safeTags.show(context, 'url');

        this._executeRules(context, 'show-safe-tags-url');

        return context.text.replace(re, '');
      }, this).join('');
      context.isHTML = isHTML;

      this._safeTags.show(context, 'html');

      this._executeRules(context, 'show-safe-tags-html');

      this._safeTags.show(context, 'own');

      this._executeRules(context, 'show-safe-tags-own');

      this._executeRules(context, 'end');

      return this._fixLineEnding(context.text, context.prefs.lineEnding);
    }
    /**
     * Get a setting.
     *
     * @param {string} ruleName
     * @param {string} setting
     *
     * @returns {*}
     */

  }, {
    key: "getSetting",
    value: function getSetting(ruleName, setting) {
      return this._settings[ruleName] && this._settings[ruleName][setting];
    }
    /**
     * Set a setting.
     *
     * @param {string} ruleName
     * @param {string} setting
     * @param {*} [value]
     *
     * @returns {Typograf}
     */

  }, {
    key: "setSetting",
    value: function setSetting(ruleName, setting, value) {
      this._settings[ruleName] = this._settings[ruleName] || {};
      this._settings[ruleName][setting] = value;
      return this;
    }
    /**
     * Is enabled a rule.
     *
     * @param {string} ruleName
     *
     * @returns {boolean}
     */

  }, {
    key: "isEnabledRule",
    value: function isEnabledRule(ruleName) {
      return this._enabledRules[ruleName];
    }
    /**
     * Is disabled a rule.
     *
     * @param {string} ruleName
     *
     * @returns {boolean}
     */

  }, {
    key: "isDisabledRule",
    value: function isDisabledRule(ruleName) {
      return !this._enabledRules[ruleName];
    }
    /**
     * Enable a rule.
     *
     * @param {string|string[]} ruleName
     *
     * @returns {Typograf} this
     */

  }, {
    key: "enableRule",
    value: function enableRule(ruleName) {
      return this._enable(ruleName, true);
    }
    /**
     * Disable a rule.
     *
     * @param {string|string[]} ruleName
     *
     * @returns {Typograf} this
     */

  }, {
    key: "disableRule",
    value: function disableRule(ruleName) {
      return this._enable(ruleName, false);
    }
    /**
     * Add safe tag.
     *
     * @example
     * // var t = new Typograf({locale: 'ru'});
     * // t.addSafeTag('<mytag>', '</mytag>');
     * // t.addSafeTag('<mytag>', '</mytag>', '.*?');
     * // t.addSafeTag(/<mytag>.*?</mytag>/gi);
     *
     * @param {string|RegExp} startTag
     * @param {string} [endTag]
     * @param {string} [middle]
     *
     * @returns {Typograf} this
    */

  }, {
    key: "addSafeTag",
    value: function addSafeTag(startTag, endTag, middle) {
      var tag = startTag instanceof RegExp ? startTag : [startTag, endTag, middle];

      this._safeTags.add(tag);

      return this;
    }
  }, {
    key: "_executeRules",
    value: function _executeRules(context, queue) {
      queue = queue || 'default';
      var rules = this._rulesByQueues[queue];
      var innerRules = this._innerRulesByQueues[queue];
      innerRules && innerRules.forEach(function (rule) {
        this._ruleIterator(context, rule);
      }, this);
      rules && rules.forEach(function (rule) {
        this._ruleIterator(context, rule);
      }, this);
    }
  }, {
    key: "_ruleIterator",
    value: function _ruleIterator(context, rule) {
      var rlocale = rule._locale;
      var live = this._prefs.live;

      if (live === true && rule.live === false || live === false && rule.live === true) {
        return;
      }

      if ((rlocale === 'common' || rlocale === context.prefs.locale[0]) && this.isEnabledRule(rule.name)) {
        if (context.prefs.ruleFilter && !context.prefs.ruleFilter(rule)) {
          return;
        }

        this._onBeforeRule && this._onBeforeRule(rule.name, context.text, context);
        context.text = rule.handler.call(this, context.text, this._settings[rule.name], context);
        this._onAfterRule && this._onAfterRule(rule.name, context.text, context);
      }
    }
  }, {
    key: "_removeCR",
    value: function _removeCR(text) {
      return text.replace(/\r\n?/g, '\n');
    }
  }, {
    key: "_fixLineEnding",
    value: function _fixLineEnding(text, type) {
      if (type === 'CRLF') {
        // Windows
        return text.replace(/\n/g, '\r\n');
      } else if (type === 'CR') {
        // Mac
        return text.replace(/\n/g, '\r');
      }

      return text;
    }
  }, {
    key: "_prepareRule",
    value: function _prepareRule(rule) {
      var name = rule.name;

      var t = _typeof(rule.settings);

      var settings = {};

      if (t === 'object') {
        settings = Typograf.deepCopy(rule.settings);
      } else if (t === 'function') {
        settings = rule.settings(rule);
      }

      this._settings[name] = settings;
      this._enabledRules[name] = rule._enabled;
    }
  }, {
    key: "_enable",
    value: function _enable(rule, enabled) {
      if (Array.isArray(rule)) {
        rule.forEach(function (el) {
          this._enableByMask(el, enabled);
        }, this);
      } else {
        this._enableByMask(rule, enabled);
      }

      return this;
    }
  }, {
    key: "_enableByMask",
    value: function _enableByMask(rule, enabled) {
      if (!rule) {
        return;
      }

      if (rule.search(/\*/) !== -1) {
        var re = new RegExp(rule.replace(/\//g, '\\/').replace(/\*/g, '.*'));

        this._rules.forEach(function (el) {
          var name = el.name;

          if (re.test(name)) {
            this._enabledRules[name] = enabled;
          }
        }, this);
      } else {
        this._enabledRules[rule] = enabled;
      }
    }
  }, {
    key: "_getRule",
    value: function _getRule(name) {
      var rule = null;

      this._rules.some(function (item) {
        if (item.name === name) {
          rule = item;
          return true;
        }

        return false;
      });

      return rule;
    }
  }], [{
    key: "addRule",
    value: function addRule(rule) {
      var _rule$name$split = rule.name.split('/'),
          _rule$name$split2 = _slicedToArray(_rule$name$split, 3),
          locale = _rule$name$split2[0],
          group = _rule$name$split2[1],
          name = _rule$name$split2[2];

      rule._enabled = rule.disabled === true ? false : true;
      rule._locale = locale;
      rule._group = group;
      rule._name = name;
      this.addLocale(rule._locale);

      this._setIndex(rule);

      this.prototype._rules.push(rule);

      this._sortRules(this.prototype._rules);

      return this;
    }
    /**
     * Add internal rule.
     * Internal rules are executed before main.
     *
     * @static
     * @param {Object} rule
     * @param {string} rule.name Name of rule
     * @param {Function} rule.handler Processing function
     *
     * @returns {Typograf} this
     */

  }, {
    key: "addInnerRule",
    value: function addInnerRule(rule) {
      this.prototype._innerRules.push(rule);

      rule._locale = rule.name.split('/')[0];
      return this;
    }
    /**
     * Get a deep copy of a object.
     *
     * @param {*} obj
     *
     * @returns {*}
     */

  }, {
    key: "deepCopy",
    value: function deepCopy(obj) {
      return _typeof(obj) === 'object' ? JSON.parse(JSON.stringify(obj)) : obj;
    }
  }, {
    key: "_repeat",
    value: function _repeat(symbol, count) {
      var result = '';

      for (;;) {
        if ((count & 1) === 1) {
          result += symbol;
        }

        count >>>= 1;

        if (count === 0) {
          break;
        }

        symbol += symbol;
      }

      return result;
    }
  }, {
    key: "_replace",
    value: function _replace(text, re) {
      for (var i = 0; i < re.length; i++) {
        text = text.replace(re[i][0], re[i][1]);
      }

      return text;
    }
  }, {
    key: "_replaceNbsp",
    value: function _replaceNbsp(text) {
      return text.replace(/\u00A0/g, ' ');
    }
  }, {
    key: "_setIndex",
    value: function _setIndex(rule) {
      var index = rule.index;

      var t = _typeof(index);

      var groupIndex = this.groupIndexes[rule._group];

      if (t === 'undefined') {
        index = groupIndex;
      } else if (t === 'string') {
        index = groupIndex + parseInt(rule.index, 10);
      }

      rule._index = index;
    }
  }, {
    key: "_sortRules",
    value: function _sortRules(rules) {
      rules.sort(function (a, b) {
        return a._index > b._index ? 1 : -1;
      });
    }
  }, {
    key: "_mix",
    value: function _mix(dest, props) {
      Object.keys(props).forEach(function (key) {
        dest[key] = props[key];
      });
    }
  }]);

  return Typograf;
}();

Typograf._mix(Typograf, {
  version: '6.8.2',
  inlineElements: inlineElements,
  blockElements: blockElements,
  groupIndexes: groupIndexes,
  HtmlEntities: HtmlEntities$1,
  _reUrl: new RegExp('(https?|file|ftp)://([a-zA-Z0-9/+-=%&:_.~?]+[a-zA-Z0-9#+]*)', 'g'),
  _privateLabel: "\uF000",
  _privateSeparateLabel: "\uF001"
});

Typograf._mix(Typograf.prototype, {
  _rules: [],
  _innerRules: []
});

Typograf._mix(Typograf, {
  /**
   * Get data for use in rules.
   *
   * @static
   * @param {string} key
   *
   * @returns {*}
   */
  getData: function getData(key) {
    return this._data[key];
  },

  /**
   * Set data for use in rules.
   *
   * @static
   * @param {string|Object} key
   * @param {*} [value]
   */
  setData: function setData(key, value) {
    if (typeof key === 'string') {
      this.addLocale(key);
      this._data[key] = value;
    } else if (_typeof(key) === 'object') {
      Object.keys(key).forEach(function (k) {
        this.addLocale(k);
        this._data[k] = key[k];
      }, this);
    }
  },
  _data: {}
});

Typograf._mix(Typograf, {
  /**
   * Add a locale.
   *
   * @static
   *
   * @param {string} locale
   */
  addLocale: function addLocale(locale) {
    var code = (locale || '').split('/')[0];

    if (code && code !== 'common' && !this.hasLocale(code)) {
      this._locales.push(code);

      this._locales.sort();
    }
  },

  /**
   * Get locales.
   *
   * @static
   *
   * @returns {Array}
   */
  getLocales: function getLocales() {
    return this._locales;
  },

  /**
   * Has a locale.
   *
   * @static
   *
   * @param {string} locale
   *
   * @returns {boolean}
   */
  hasLocale: function hasLocale(locale) {
    return locale === 'common' || this._locales.indexOf(locale) !== -1;
  },
  _prepareLocale: function _prepareLocale(locale1, locale2) {
    var locale = locale1 || locale2;
    var result = locale;

    if (!Array.isArray(locale)) {
      result = [locale];
    }

    return result;
  },
  _locales: []
});

/* eslint-disable */
/* eslint-enable */

Typograf.setData('be/char', 'Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÒ');
Typograf.setData('be/quote', {
  left: 'Â«â',
  right: 'Â»â'
});
Typograf.setData('bg/char', 'Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑ');
Typograf.setData('bg/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('ca/char', 'abcdefghijlmnopqrstuvxyzÃ Ã§Ã¨Ã©Ã­Ã¯Ã²Ã³ÃºÃ¼');
Typograf.setData('ca/quote', {
  left: 'Â«â',
  right: 'Â»â'
});
Typograf.setData('common/char', 'a-z');
Typograf.setData('common/dash', '--?|â|â|â'); // --, &#8210, &ndash, &mdash

Typograf.setData('common/quote', 'Â«â¹Â»âºââââ"');
Typograf.setData('cs/char', 'a-zÃ¡Ã©Ã­Ã³ÃºÃ½ÄÄÄÅÅÅ¡Å¥Å¯Å¾');
Typograf.setData('cs/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('da/char', 'a-zÃ¥Ã¦Ã¸');
Typograf.setData('da/quote', {
  left: 'Â»âº',
  right: 'Â«â¹'
});
Typograf.setData('de/char', 'a-zÃÃ¤Ã¶Ã¼');
Typograf.setData('de/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('el/char', 'ÎÎ¬Î­Î®Î¯Î°Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏÏÏÏÏÏÏÏ²á½±á½³á½µá½·á½¹á½»á½½');
Typograf.setData('el/quote', {
  left: 'Â«â',
  right: 'Â»â'
});
Typograf.setData('en-GB/char', 'a-z');
Typograf.setData('en-GB/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('en-US/char', 'a-z');
Typograf.setData('en-US/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('eo/char', 'abcdefghijklmnoprstuvzÄÄÄ¥ÄµÅÅ­');
Typograf.setData('eo/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('es/char', 'a-zÃ¡Ã©Ã­Ã±Ã³ÃºÃ¼');
Typograf.setData('es/quote', {
  left: 'Â«â',
  right: 'Â»â'
});
Typograf.setData('et/char', 'abdefghijklmnoprstuvzÃ¤ÃµÃ¶Ã¼Å¡Å¾');
Typograf.setData('et/quote', {
  left: 'âÂ«',
  right: 'âÂ»'
});
Typograf.setData('fi/char', 'abcdefghijklmnopqrstuvyÃ¶Ã¤Ã¥');
Typograf.setData('fi/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('fr/char', 'a-zÃ Ã¢Ã§Ã¨Ã©ÃªÃ«Ã®Ã¯Ã´Ã»Ã¼ÅÃ¦');
Typograf.setData('fr/quote', {
  left: 'Â«â¹',
  right: 'Â»âº',
  spacing: true
});
Typograf.setData('ga/char', 'abcdefghilmnoprstuvwxyzÃ¡Ã©Ã­Ã³Ãº');
Typograf.setData('ga/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('hu/char', 'a-zÃ¡Ã¤Ã©Ã­Ã³Ã¶ÃºÃ¼ÅÅ±');
Typograf.setData('hu/quote', {
  left: 'âÂ»',
  right: 'âÂ«'
});
Typograf.setData('it/char', 'a-zÃ Ã©Ã¨Ã¬Ã²Ã¹');
Typograf.setData('it/quote', {
  left: 'Â«â',
  right: 'Â»â'
});
Typograf.setData('lv/char', 'abcdefghijklmnopqrstuvxzÃ¦Å');
Typograf.setData('lv/quote', {
  left: 'Â«â',
  right: 'Â»â'
});
Typograf.setData('nl/char', 'a-zÃ¤Ã§Ã¨Ã©ÃªÃ«Ã®Ã¯Ã±Ã¶Ã»Ã¼');
Typograf.setData('nl/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('no/char', 'a-zÃ¥Ã¦Ã¨Ã©ÃªÃ²Ã³Ã´Ã¸');
Typograf.setData('no/quote', {
  left: 'Â«â',
  right: 'Â»â'
});
Typograf.setData('pl/char', 'abcdefghijklmnoprstuvwxyzÃ³ÄÄÄÅÅÅÅºÅ¼');
Typograf.setData('pl/quote', {
  left: 'âÂ«',
  right: 'âÂ»'
});
Typograf.setData('ro/char', 'abcdefghijklmnoprstuvxzÃ®ÄÈÈ');
Typograf.setData('ro/quote', {
  left: 'âÂ«',
  right: 'âÂ»'
});
Typograf.setData('ru/char', 'Ð°-ÑÑ');
Typograf.setData({
  'ru/dashBefore': '(^| |\\n)',
  'ru/dashAfter': "(?=[\xA0 ,.?:!]|$)",
  'ru/dashAfterDe': "(?=[,.?:!]|[\xA0 ][^\u0410-\u042F\u0401]|$)"
});
Typograf.setData({
  'ru/l': 'Ð°-ÑÑa-z',
  'ru/L': 'Ð-Ð¯ÐA-Z'
});
Typograf.setData({
  'ru/month': 'ÑÐ½Ð²Ð°ÑÑ|ÑÐµÐ²ÑÐ°Ð»Ñ|Ð¼Ð°ÑÑ|Ð°Ð¿ÑÐµÐ»Ñ|Ð¼Ð°Ð¹|Ð¸ÑÐ½Ñ|Ð¸ÑÐ»Ñ|Ð°Ð²Ð³ÑÑÑ|ÑÐµÐ½ÑÑÐ±ÑÑ|Ð¾ÐºÑÑÐ±ÑÑ|Ð½Ð¾ÑÐ±ÑÑ|Ð´ÐµÐºÐ°Ð±ÑÑ',
  'ru/monthGenCase': 'ÑÐ½Ð²Ð°ÑÑ|ÑÐµÐ²ÑÐ°Ð»Ñ|Ð¼Ð°ÑÑÐ°|Ð°Ð¿ÑÐµÐ»Ñ|Ð¼Ð°Ñ|Ð¸ÑÐ½Ñ|Ð¸ÑÐ»Ñ|Ð°Ð²Ð³ÑÑÑÐ°|ÑÐµÐ½ÑÑÐ±ÑÑ|Ð¾ÐºÑÑÐ±ÑÑ|Ð½Ð¾ÑÐ±ÑÑ|Ð´ÐµÐºÐ°Ð±ÑÑ',
  'ru/monthPreCase': 'ÑÐ½Ð²Ð°ÑÐµ|ÑÐµÐ²ÑÐ°Ð»Ðµ|Ð¼Ð°ÑÑÐµ|Ð°Ð¿ÑÐµÐ»Ðµ|Ð¼Ð°Ðµ|Ð¸ÑÐ½Ðµ|Ð¸ÑÐ»Ðµ|Ð°Ð²Ð³ÑÑÑÐµ|ÑÐµÐ½ÑÑÐ±ÑÐµ|Ð¾ÐºÑÑÐ±ÑÐµ|Ð½Ð¾ÑÐ±ÑÐµ|Ð´ÐµÐºÐ°Ð±ÑÐµ',
  'ru/shortMonth': 'ÑÐ½Ð²|ÑÐµÐ²|Ð¼Ð°Ñ|Ð°Ð¿Ñ|Ð¼Ð°[ÐµÐ¹Ñ]|Ð¸ÑÐ½|Ð¸ÑÐ»|Ð°Ð²Ð³|ÑÐµÐ½|Ð¾ÐºÑ|Ð½Ð¾Ñ|Ð´ÐµÐº'
});
Typograf.setData('ru/quote', {
  left: 'Â«ââ',
  right: 'Â»ââ',
  removeDuplicateQuotes: true
});
Typograf.setData('ru/weekday', 'Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº|Ð²ÑÐ¾ÑÐ½Ð¸Ðº|ÑÑÐµÐ´Ð°|ÑÐµÑÐ²ÐµÑÐ³|Ð¿ÑÑÐ½Ð¸ÑÐ°|ÑÑÐ±Ð±Ð¾ÑÐ°|Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ');
Typograf.setData('sk/char', 'abcdefghijklmnoprstuvwxyzÃ¡Ã¤Ã©Ã­Ã³Ã´ÃºÃ½ÄÄÄ¾ÅÅÅ¡Å¥Å¾');
Typograf.setData('sk/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('sl/char', 'a-zÄÅ¡Å¾');
Typograf.setData('sl/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('sr/char', 'abcdefghijklmnoprstuvzÄÄÄÅ¡Å¾');
Typograf.setData('sr/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('sv/char', 'a-zÃ¤Ã¥Ã©Ã¶');
Typograf.setData('sv/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('tr/char', 'abcdefghijklmnoprstuvyzÃ¢Ã§Ã®Ã¶Ã»Ã¼ÄÄ±Å');
Typograf.setData('tr/quote', {
  left: 'ââ',
  right: 'ââ'
});
Typograf.setData('uk/char', 'Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÒ');
Typograf.setData('uk/quote', {
  left: 'Â«â',
  right: 'Â»â'
});

/* eslint-disable */
/* eslint-enable */

Typograf.addRule({
  name: 'common/html/e-mail',
  queue: 'end',
  handler: function handler(text, settings, context) {
    return context.isHTML ? text : text.replace(/(^|[\s;(])([\w\-.]{2,64})@([\w\-.]{2,64})\.([a-z]{2,64})([)\s.,!?]|$)/gi, '$1<a href="mailto:$2@$3.$4">$2@$3.$4</a>$5');
  },
  disabled: true,
  htmlAttrs: false
});
Typograf.addRule({
  name: 'common/html/escape',
  index: '+100',
  queue: 'end',
  handler: function handler(text) {
    var entityMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&#39;',
      '/': '&#x2F;'
    };
    return text.replace(/[&<>"'/]/g, function (s) {
      return entityMap[s];
    });
  },
  disabled: true
});
Typograf.addRule({
  name: 'common/html/nbr',
  index: '+10',
  queue: 'end',
  handler: function handler(text) {
    return text.replace(/([^\n>])\n(?=[^\n])/g, '$1<br/>\n');
  },
  disabled: true,
  htmlAttrs: false
});
Typograf.addRule({
  name: 'common/html/p',
  index: '+5',
  queue: 'end',
  handler: function handler(text) {
    var blockRe = new RegExp('<(' + Typograf.blockElements.join('|') + ')[>\\s]');
    var separator = '\n\n';
    var buffer = text.split(separator);
    buffer.forEach(function (text, i, data) {
      if (!text.trim()) {
        return;
      }

      if (!blockRe.test(text)) {
        data[i] = text.replace(/^(\s*)/, '$1<p>').replace(/(\s*)$/, '</p>$1');
      }
    });
    return buffer.join(separator);
  },
  disabled: true,
  htmlAttrs: false
});
Typograf.addRule({
  name: 'common/html/processingAttrs',
  queue: 'hide-safe-tags-own',
  // After "hide-safe-tags-own", before "hide-safe-tags-html".
  handler: function handler(text, settings, context) {
    var that = this;
    var reAttrs = new RegExp('(^|\\s)(' + settings.attrs.join('|') + ')=("[^"]*?"|\'[^\']*?\')', 'gi');
    var prefs = Typograf.deepCopy(context.prefs);

    prefs.ruleFilter = function (rule) {
      return rule.htmlAttrs !== false;
    };

    return text.replace(/(<[-\w]+\s)([^>]+?)(?=>)/g, function (match, tagName, attrs) {
      var resultAttrs = attrs.replace(reAttrs, function (submatch, space, attrName, attrValue) {
        var lquote = attrValue[0];
        var rquote = attrValue[attrValue.length - 1];
        var value = attrValue.slice(1, -1);
        return space + attrName + '=' + lquote + that.execute(value, prefs) + rquote;
      });
      return tagName + resultAttrs;
    });
  },
  settings: {
    attrs: ['title', 'placeholder']
  },
  disabled: true,
  htmlAttrs: false
});
Typograf.addRule({
  name: 'common/html/quot',
  queue: 'hide-safe-tags',
  handler: function handler(text) {
    return text.replace(/&quot;/g, '"');
  }
});
Typograf.addRule({
  name: 'common/html/stripTags',
  index: '+99',
  queue: 'end',
  handler: function handler(text) {
    return text.replace(/<[^>]+>/g, '');
  },
  disabled: true
});
Typograf.addRule({
  name: 'common/html/url',
  queue: 'end',
  handler: function handler(text, settings, context) {
    return context.isHTML ? text : text.replace(Typograf._reUrl, function ($0, protocol, path) {
      path = path.replace(/([^/]+\/?)(\?|#)$/, '$1') // Remove ending ? and #
      .replace(/^([^/]+)\/$/, '$1'); // Remove ending /

      if (protocol === 'http') {
        path = path.replace(/^([^/]+)(:80)([^\d]|\/|$)/, '$1$3'); // Remove 80 port
      } else if (protocol === 'https') {
        path = path.replace(/^([^/]+)(:443)([^\d]|\/|$)/, '$1$3'); // Remove 443 port
      }

      var url = path;
      var fullUrl = protocol + '://' + path;
      var firstPart = '<a href="' + fullUrl + '">';

      if (protocol === 'http' || protocol === 'https') {
        url = url.replace(/^www\./, '');
        return firstPart + (protocol === 'http' ? url : protocol + '://' + url) + '</a>';
      }

      return firstPart + fullUrl + '</a>';
    });
  },
  disabled: true,
  htmlAttrs: false
});
Typograf.addRule({
  name: 'common/nbsp/afterNumber',
  handler: function handler(text, settings, context) {
    var re = '(^|\\D)(\\d{1,5}) ([' + context.getData('char') + ']+)';
    return text.replace(new RegExp(re, 'gi'), "$1$2\xA0$3");
  },
  disabled: true
});
Typograf.addRule({
  name: 'common/nbsp/afterParagraphMark',
  handler: function handler(text) {
    return text.replace(/Â¶ ?(?=\d)/g, "\xB6\xA0");
  }
});
Typograf.addRule({
  name: 'common/nbsp/afterSectionMark',
  handler: function handler(text, settings, context) {
    // \u2009 - THIN SPACE
    // \u202F - NARROW NO-BREAK SPACE
    var locale = context.prefs.locale[0];
    return text.replace(/Â§[ \u00A0\u2009]?(?=\d|I|V|X)/g, locale === 'ru' ? "\xA7\u202F" : "\xA7\xA0");
  }
});
Typograf.addRule({
  name: 'common/nbsp/afterShortWord',
  handler: function handler(text, settings, context) {
    var len = settings.lengthShortWord;
    var before = " \xA0(" + Typograf._privateLabel + Typograf.getData('common/quote');
    var subStr = '(^|[' + before + '])([' + context.getData('char') + ']{1,' + len + '}) ';
    var newSubStr = "$1$2\xA0";
    var re = new RegExp(subStr, 'gim');
    return text.replace(re, newSubStr).replace(re, newSubStr);
  },
  settings: {
    lengthShortWord: 2
  }
});
Typograf.addRule({
  name: 'common/nbsp/beforeShortLastNumber',
  handler: function handler(text, settings, context) {
    var ch = context.getData('char');
    var CH = ch.toUpperCase();
    var re = new RegExp('([' + ch + CH + ']) (?=\\d{1,' + settings.lengthLastNumber + '}[-+â%\'"' + context.getData('quote').right + ']?([.!?â¦]( [' + CH + ']|$)|$))', 'gm');
    return text.replace(re, "$1\xA0");
  },
  live: false,
  settings: {
    lengthLastNumber: 2
  }
});
Typograf.addRule({
  name: 'common/nbsp/beforeShortLastWord',
  handler: function handler(text, settings, context) {
    var ch = context.getData('char');
    var CH = ch.toUpperCase();
    var re = new RegExp('([' + ch + '\\d]) ([' + ch + CH + ']{1,' + settings.lengthLastWord + '}[.!?â¦])( [' + CH + ']|$)', 'g');
    return text.replace(re, "$1\xA0$2$3");
  },
  settings: {
    lengthLastWord: 3
  }
});
Typograf.addRule({
  name: 'common/nbsp/dpi',
  handler: function handler(text) {
    return text.replace(/(\d) ?(lpi|dpi)(?!\w)/, "$1\xA0$2");
  }
});

(function () {
  function replaceNbsp($0, $1, $2, $3) {
    return $1 + $2.replace(/([^\u00A0])\u00A0([^\u00A0])/g, '$1 $2') + $3;
  }

  Typograf.addRule({
    name: 'common/nbsp/nowrap',
    queue: 'end',
    handler: function handler(text) {
      return text.replace(/(<nowrap>)(.*?)(<\/nowrap>)/g, replaceNbsp).replace(/(<nobr>)(.*?)(<\/nobr>)/g, replaceNbsp);
    }
  });
})();

Typograf.addRule({
  name: 'common/nbsp/replaceNbsp',
  queue: 'utf',
  live: false,
  handler: Typograf._replaceNbsp,
  disabled: true
});
Typograf.addRule({
  name: 'common/number/fraction',
  handler: function handler(text) {
    return text.replace(/(^|\D)1\/2(\D|$)/g, '$1Â½$2').replace(/(^|\D)1\/4(\D|$)/g, '$1Â¼$2').replace(/(^|\D)3\/4(\D|$)/g, '$1Â¾$2');
  }
});
Typograf.addRule({
  name: 'common/number/mathSigns',
  handler: function handler(text) {
    return Typograf._replace(text, [[/!=/g, 'â '], [/<=/g, 'â¤'], [/(^|[^=])>=/g, '$1â¥'], [/<=>/g, 'â'], [/<</g, 'âª'], [/>>/g, 'â«'], [/~=/g, 'â'], [/(^|[^+])\+-/g, '$1Â±']]);
  }
});
Typograf.addRule({
  name: 'common/number/times',
  handler: function handler(text) {
    return text.replace(/(\d)[ \u00A0]?[xÑ][ \u00A0]?(\d)/g, '$1Ã$2');
  }
});
Typograf.addRule({
  name: 'common/other/delBOM',
  queue: 'start',
  index: -1,
  handler: function handler(text) {
    if (text.charCodeAt(0) === 0xFEFF) {
      return text.slice(1);
    }

    return text;
  }
});
Typograf.addRule({
  name: 'common/other/repeatWord',
  handler: function handler(text, settings, context) {
    var punc = '[;:,.?! \n' + Typograf.getData('common/quote') + ']';
    var re = new RegExp('(' + punc + '|^)' + '([' + context.getData('char') + ']{' + settings.min + ',}) ' + '\\2(' + punc + '|$)', 'gi');
    return text.replace(re, '$1$2$3');
  },
  settings: {
    min: 2
  },
  disabled: true
});
Typograf.addRule({
  name: 'common/punctuation/apostrophe',
  handler: function handler(text, settings, context) {
    var letters = '([' + context.getData('char') + '])';
    var re = new RegExp(letters + '\'' + letters, 'gi');
    return text.replace(re, '$1â$2');
  }
});
Typograf.addRule({
  name: 'common/punctuation/delDoublePunctuation',
  handler: function handler(text) {
    return text.replace(/(^|[^,]),,(?!,)/g, '$1,').replace(/(^|[^:])::(?!:)/g, '$1:').replace(/(^|[^!?.])\.\.(?!\.)/g, '$1.').replace(/(^|[^;]);;(?!;)/g, '$1;').replace(/(^|[^?])\?\?(?!\?)/g, '$1?');
  }
});
Typograf.addRule({
  name: 'common/punctuation/hellip',
  handler: function handler(text, settings, context) {
    return context.prefs.locale[0] === 'ru' ? text.replace(/(^|[^.])\.{3,4}(?=[^.]|$)/g, '$1â¦') : text.replace(/(^|[^.])\.{3}(\.?)(?=[^.]|$)/g, '$1â¦$2');
  }
});
var Quote = {
  bufferQuotes: {
    left: "\uF005\uF006\uF007",
    right: "\uF008\uF009\uF0A0"
  },
  maxLevel: 3,
  beforeLeft: " \n\t\xA0[(",
  afterRight: " \n\t\xA0!?.:;#*,\u2026)",
  process: function process(params) {
    var text = params.context.text;
    var count = this.count(text);

    if (!count.total) {
      return text;
    }

    var originalSettings = params.settings;
    var isEqualQuotes = params.settings.left[0] === params.settings.right[0]; // For SW, FI

    if (isEqualQuotes) {
      params.settings = Typograf.deepCopy(params.settings);
      params.settings.left = this.bufferQuotes.left.slice(0, params.settings.left.length);
      params.settings.right = this.bufferQuotes.right.slice(0, params.settings.right.length);
    } // For FR


    if (params.settings.spacing) {
      text = this.removeSpacing(text, params.settings);
    }

    text = this.set(text, params); // For FR

    if (params.settings.spacing) {
      text = this.setSpacing(text, params.settings);
    } // For RU


    if (params.settings.removeDuplicateQuotes) {
      text = this.removeDuplicates(text, params.settings);
    } // For SW, FI


    if (isEqualQuotes) {
      text = this.returnOriginalQuotes(text, originalSettings, params.settings);
      params.settings = originalSettings;
    }

    return text;
  },
  returnOriginalQuotes: function returnOriginalQuotes(text, originalSettings, bufferSettings) {
    var buffer = {};

    for (var i = 0; i < bufferSettings.left.length; i++) {
      buffer[bufferSettings.left[i]] = originalSettings.left[i];
      buffer[bufferSettings.right[i]] = originalSettings.right[i];
    }

    return text.replace(new RegExp('[' + bufferSettings.left + bufferSettings.right + ']', 'g'), function (quote) {
      return buffer[quote];
    });
  },
  count: function count(text) {
    var count = {
      total: 0
    };
    text.replace(new RegExp('[' + Typograf.getData('common/quote') + ']', 'g'), function (quote) {
      if (!count[quote]) {
        count[quote] = 0;
      }

      count[quote]++;
      count.total++;
      return quote;
    });
    return count;
  },
  removeDuplicates: function removeDuplicates(text, settings) {
    var lquote = settings.left[0];
    var lquote2 = settings.left[1] || lquote;
    var rquote = settings.right[0];

    if (lquote !== lquote2) {
      return text;
    }

    return text // Â«Â«wordÂ» wordÂ» -> Â«wordÂ» wordÂ»
    .replace(new RegExp(lquote + lquote, 'g'), lquote) // Â«word Â«wordÂ»Â» -> Â«word Â«wordÂ»
    .replace(new RegExp(rquote + rquote, 'g'), rquote);
  },
  removeSpacing: function removeSpacing(text, settings) {
    for (var i = 0, len = settings.left.length; i < len; i++) {
      var lquote = settings.left[i];
      var rquote = settings.right[i];
      text = text.replace(new RegExp(lquote + "([ \u202F\xA0])", 'g'), lquote).replace(new RegExp("([ \u202F\xA0])" + rquote, 'g'), rquote);
    }

    return text;
  },
  setSpacing: function setSpacing(text, settings) {
    for (var i = 0, len = settings.left.length; i < len; i++) {
      var lquote = settings.left[i];
      var rquote = settings.right[i];
      text = text.replace(new RegExp(lquote + "([^\u202F])", 'g'), lquote + "\u202F$1").replace(new RegExp("([^\u202F])" + rquote, 'g'), "$1\u202F" + rquote);
    }

    return text;
  },
  set: function set(text, params) {
    var privateLabel = Typograf._privateLabel;
    var quotes = Typograf.getData('common/quote');
    var lquote = params.settings.left[0];
    var lquote2 = params.settings.left[1] || lquote;
    var rquote = params.settings.right[0];
    var reL = new RegExp('(^|[' + this.beforeLeft + '])([' + quotes + ']{1,' + this.maxLevel + '})(?=[^\\s' + privateLabel + '])', 'gim');
    var reR = new RegExp('([^\\s' + privateLabel + '])([' + quotes + ']{1,' + this.maxLevel + '})(?=[' + this.afterRight + ']|$)', 'gim');
    text = text.replace(reL, function ($0, $1, $2) {
      return $1 + Typograf._repeat(lquote, $2.length);
    }).replace(reR, function ($0, $1, $2) {
      return $1 + Typograf._repeat(rquote, $2.length);
    });
    text = this.setAboveTags(text, params);

    if (lquote !== lquote2) {
      text = this.setInner(text, params.settings);
    }

    return text;
  },
  setAboveTags: function setAboveTags(text, params) {
    var _this = this;

    var privateLabel = Typograf._privateLabel;
    var quotes = Typograf.getData('common/quote');
    var lquote = params.settings.left[0];
    var rquote = params.settings.right[0];
    return text.replace(new RegExp('(^|.)([' + quotes + '])(.|$)', 'gm'), function (original, prev, quote, next, pos) {
      if (prev !== privateLabel && next !== privateLabel) {
        return original;
      }

      if (prev === privateLabel && next === privateLabel) {
        if (quote === '"') {
          return prev + _this.getAboveTwoTags(text, pos + 1, params) + next;
        }

        return original;
      }

      if (prev === privateLabel) {
        var hasRight = _this.afterRight.indexOf(next) > -1;

        var prevInfo = _this.getPrevTagInfo(text, pos - 1, params);

        if (hasRight && prevInfo && prevInfo.group === 'html') {
          return prev + (prevInfo.isClosing ? rquote : lquote) + next;
        }

        return prev + (!next || hasRight ? rquote : lquote) + next;
      } else {
        var hasLeft = _this.beforeLeft.indexOf(prev) > -1;

        var nextInfo = _this.getNextTagInfo(text, pos + 1, params);

        if (hasLeft && nextInfo && nextInfo.group === 'html') {
          return prev + (nextInfo.isClosing ? rquote : lquote) + next;
        }

        return prev + (!prev || hasLeft ? lquote : rquote) + next;
      }
    });
  },
  getAboveTwoTags: function getAboveTwoTags(text, pos, params) {
    var prevInfo = this.getPrevTagInfo(text, pos, params);
    var nextInfo = this.getNextTagInfo(text, pos, params);

    if (prevInfo) {
      if (prevInfo.group === 'html') {
        if (!prevInfo.isClosing) {
          return params.settings.left[0];
        }

        if (nextInfo && nextInfo.isClosing && prevInfo.isClosing) {
          return params.settings.right[0];
        }
      }
    }

    return text[pos];
  },
  getPrevTagInfo: function getPrevTagInfo(text, pos, params) {
    var prevLabel = params.safeTags.getPrevLabel(text, pos - 1);

    if (prevLabel) {
      var prevTag = params.safeTags.getTagByLabel(params.context, prevLabel);

      if (prevTag) {
        return params.safeTags.getTagInfo(prevTag);
      }
    }

    return null;
  },
  getNextTagInfo: function getNextTagInfo(text, pos, params) {
    var nextLabel = params.safeTags.getNextLabel(text, pos + 1);

    if (nextLabel) {
      var nextTag = params.safeTags.getTagByLabel(params.context, nextLabel);

      if (nextTag) {
        return params.safeTags.getTagInfo(nextTag);
      }
    }

    return null;
  },
  setInner: function setInner(text, settings) {
    var leftQuotes = [];
    var rightQuotes = [];

    for (var k = 0; k < settings.left.length; k++) {
      leftQuotes.push(settings.left[k]);
      rightQuotes.push(settings.right[k]);
    }

    var lquote = settings.left[0];
    var rquote = settings.right[0];
    var minLevel = -1;
    var maxLevel = leftQuotes.length - 1;
    var level = minLevel;
    var result = '';

    for (var i = 0, len = text.length; i < len; i++) {
      var letter = text[i];

      if (letter === lquote) {
        level++;

        if (level > maxLevel) {
          level = maxLevel;
        }

        result += leftQuotes[level];
      } else if (letter === rquote) {
        if (level <= minLevel) {
          level = 0;
          result += rightQuotes[level];
        } else {
          result += rightQuotes[level];
          level--;

          if (level < minLevel) {
            level = minLevel;
          }
        }
      } else {
        if (letter === '"') {
          level = minLevel;
        }

        result += letter;
      }
    }

    var count = this.count(result, settings);
    return count[lquote] !== count[rquote] ? text : result;
  }
};
Typograf.addRule({
  name: 'common/punctuation/quote',
  handler: function handler(text, commonSettings, context) {
    var locale = context.prefs.locale[0];
    var settings = commonSettings[locale];

    if (!settings) {
      return text;
    }

    return Quote.process({
      context: context,
      settings: settings,
      safeTags: this._safeTags
    });
  },
  settings: function settings() {
    var settings = {};
    Typograf.getLocales().forEach(function (locale) {
      settings[locale] = Typograf.deepCopy(Typograf.getData(locale + '/quote'));
    });
    return settings;
  }
});
Typograf.addRule({
  name: 'common/punctuation/quoteLink',
  queue: 'show-safe-tags-html',
  index: '+5',
  handler: function handler(text, settings, context) {
    var quotes = this.getSetting('common/punctuation/quote', context.prefs.locale[0]);

    if (!quotes) {
      return text;
    }

    var entities = Typograf.HtmlEntities;
    var lquote1 = entities.getByUtf(quotes.left[0]);
    var rquote1 = entities.getByUtf(quotes.right[0]);
    var lquote2 = entities.getByUtf(quotes.left[1]);
    var rquote2 = entities.getByUtf(quotes.right[1]);
    lquote2 = lquote2 ? '|' + lquote2 : '';
    rquote2 = rquote2 ? '|' + rquote2 : '';
    var re = new RegExp('(<[aA]\\s[^>]*?>)(' + lquote1 + lquote2 + ')([^]*?)(' + rquote1 + rquote2 + ')(</[aA]>)', 'g');
    return text.replace(re, '$2$1$3$5$4');
  }
});
Typograf.addRule({
  name: 'common/symbols/arrow',
  handler: function handler(text) {
    return Typograf._replace(text, [[/(^|[^-])->(?!>)/g, '$1â'], [/(^|[^<])<-(?!-)/g, '$1â']]);
  }
});
Typograf.addRule({
  name: 'common/symbols/cf',
  handler: function handler(text) {
    var re = new RegExp("(^|[\\s(\\[+\u2248\xB1\u2212\u2014\u2013\\-])(\\d+(?:[.,]\\d+)?)[ \xA0\u2009]?(C|F)([\\W\\s.,:!?\")\\]]|$)", 'mg');
    return text.replace(re, "$1$2\u2009\xB0$3$4");
  }
});
Typograf.addRule({
  name: 'common/symbols/copy',
  handler: function handler(text) {
    return Typograf._replace(text, [[/\(r\)/gi, 'Â®'], [/(copyright )?\((c|Ñ)\)/gi, 'Â©'], [/\(tm\)/gi, 'â¢']]);
  }
});
Typograf.addRule({
  name: 'common/space/afterPunctuation',
  handler: function handler(text) {
    var privateLabel = Typograf._privateLabel;
    var reExcl = new RegExp('(!|;|\\?)([^).â¦!;?\\s[\\])' + privateLabel + Typograf.getData('common/quote') + '])', 'g');
    var reComma = new RegExp('(\\D)(,|:)([^)",:.?\\s\\/\\\\' + privateLabel + '])', 'g');
    return text.replace(reExcl, '$1 $2').replace(reComma, '$1$2 $3');
  }
});
Typograf.addRule({
  name: 'common/space/beforeBracket',
  handler: function handler(text, settings, context) {
    var re = new RegExp('([' + context.getData('char') + '.!?,;â¦)])\\(', 'gi');
    return text.replace(re, '$1 (');
  }
});
Typograf.addRule({
  name: 'common/space/bracket',
  handler: function handler(text) {
    return text.replace(/(\() +/g, '(').replace(/ +\)/g, ')');
  }
});
Typograf.addRule({
  name: 'common/space/delBeforePercent',
  handler: function handler(text) {
    return text.replace(/(\d)( |\u00A0)(%|â°|â±)/g, '$1$3');
  }
});
Typograf.addRule({
  name: 'common/space/delBeforePunctuation',
  handler: function handler(text) {
    return text.replace(/([!?]) (?=[!?])/g, '$1').replace(/(^|[^!?:;,.â¦]) ([!?:;,.])(?!\))/g, '$1$2');
  }
});
Typograf.addRule({
  name: 'common/space/delLeadingBlanks',
  handler: function handler(text) {
    return text.replace(/\n[ \t]+/g, '\n');
  },
  disabled: true
});
Typograf.addRule({
  name: 'common/space/delRepeatN',
  index: '-1',
  handler: function handler(text) {
    return text.replace(/\n{3,}/g, '\n\n');
  }
});
Typograf.addRule({
  name: 'common/space/delRepeatSpace',
  index: '-1',
  handler: function handler(text) {
    return text.replace(/([^\n \t])[ \t]{2,}(?![\n \t])/g, '$1 ');
  }
});
Typograf.addRule({
  name: 'common/space/delTrailingBlanks',
  index: '-3',
  handler: function handler(text) {
    return text.replace(/[ \t]+\n/g, '\n');
  }
});
Typograf.addRule({
  name: 'common/space/replaceTab',
  index: '-5',
  handler: function handler(text) {
    return text.replace(/\t/g, '    ');
  }
});
Typograf.addRule({
  name: 'common/space/squareBracket',
  handler: function handler(text) {
    return text.replace(/(\[) +/g, '[').replace(/ +\]/g, ']');
  }
});
Typograf.addRule({
  name: 'common/space/trimLeft',
  index: '-4',
  handler: String.prototype.trimLeft ? function (text) {
    return text.trimLeft();
  } :
  /* istanbul ignore next */
  function (text) {
    return text.replace(/^[\s\uFEFF\xA0]+/g, '');
  }
});
Typograf.addRule({
  name: 'common/space/trimRight',
  index: '-3',
  live: false,
  handler: String.prototype.trimRight ? function (text) {
    return text.trimRight();
  } :
  /* istanbul ignore next */
  function (text) {
    return text.replace(/[\s\uFEFF\xA0]+$/g, '');
  }
});
Typograf.addRule({
  name: 'en-US/dash/main',
  index: '-5',
  handler: function handler(text) {
    var dashes = Typograf.getData('common/dash');
    var nonBreakingSpace = "\xA0";
    var emDash = "\u2014";
    var spaceBefore = "[ ".concat(nonBreakingSpace, "]"); // white space or a non-breaking space

    var spaceAfter = "[ ".concat(nonBreakingSpace, "\n]"); // same as spaceBefore, but includes line break

    var re = new RegExp("".concat(spaceBefore, "(").concat(dashes, ")(").concat(spaceAfter, ")"), 'g');
    return text.replace(re, "".concat(nonBreakingSpace).concat(emDash, "$2"));
  }
});
Typograf.addRule({
  name: 'ru/date/fromISO',
  handler: function handler(text) {
    var sp1 = '(-|\\.|\\/)';
    var sp2 = '(-|\\/)';
    var re1 = new RegExp('(^|\\D)(\\d{4})' + sp1 + '(\\d{2})' + sp1 + '(\\d{2})(\\D|$)', 'gi');
    var re2 = new RegExp('(^|\\D)(\\d{2})' + sp2 + '(\\d{2})' + sp2 + '(\\d{4})(\\D|$)', 'gi');
    return text.replace(re1, '$1$6.$4.$2$7').replace(re2, '$1$4.$2.$6$7');
  }
});
Typograf.addRule({
  name: 'ru/date/weekday',
  handler: function handler(text) {
    var space = "( |\xA0)";
    var monthCase = Typograf.getData('ru/monthGenCase');
    var weekday = Typograf.getData('ru/weekday');
    var re = new RegExp('(\\d)' + space + '(' + monthCase + '),' + space + '(' + weekday + ')', 'gi');
    return text.replace(re, function () {
      var a = arguments;
      return a[1] + a[2] + a[3].toLowerCase() + ',' + a[4] + a[5].toLowerCase();
    });
  }
});
Typograf.addRule({
  name: 'ru/dash/centuries',
  handler: function handler(text, settings) {
    var dashes = '(' + Typograf.getData('common/dash') + ')';
    var re = new RegExp("(X|I|V)[ |\xA0]?" + dashes + "[ |\xA0]?(X|I|V)", 'g');
    return text.replace(re, '$1' + settings.dash + '$3');
  },
  settings: {
    dash: "\u2013" // &ndash;

  }
});
Typograf.addRule({
  name: 'ru/dash/daysMonth',
  handler: function handler(text, settings) {
    var re = new RegExp('(^|\\s)([123]?\\d)' + '(' + Typograf.getData('common/dash') + ')' + "([123]?\\d)[ \xA0]" + '(' + Typograf.getData('ru/monthGenCase') + ')', 'g');
    return text.replace(re, '$1$2' + settings.dash + "$4\xA0$5");
  },
  settings: {
    dash: "\u2013" // &ndash;

  }
});
Typograf.addRule({
  name: 'ru/dash/de',
  handler: function handler(text) {
    var re = new RegExp('([a-ÑÑ]+) Ð´Ðµ' + Typograf.getData('ru/dashAfterDe'), 'g');
    return text.replace(re, '$1-Ð´Ðµ');
  },
  disabled: true
});
Typograf.addRule({
  name: 'ru/dash/decade',
  handler: function handler(text, settings) {
    var re = new RegExp('(^|\\s)(\\d{3}|\\d)0' + '(' + Typograf.getData('common/dash') + ')' + "(\\d{3}|\\d)0(-\u0435[ \xA0])" + "(?=\u0433\\.?[ \xA0]?\u0433|\u0433\u043E\u0434)", 'g');
    return text.replace(re, '$1$20' + settings.dash + '$40$5');
  },
  settings: {
    dash: "\u2013" // &ndash;

  }
});
Typograf.addRule({
  name: 'ru/dash/directSpeech',
  handler: function handler(text) {
    var dashes = Typograf.getData('common/dash');
    var re1 = new RegExp("([\"\xBB\u2018\u201C,])[ |\xA0]?(" + dashes + ")[ |\xA0]", 'g');
    var re2 = new RegExp('(^|' + Typograf._privateLabel + ')(' + dashes + ")( |\xA0)", 'gm');
    var re3 = new RegExp("([.\u2026?!])[ \xA0](" + dashes + ")[ \xA0]", 'g');
    return text.replace(re1, "$1\xA0\u2014 ").replace(re2, "$1\u2014\xA0").replace(re3, "$1 \u2014\xA0");
  }
});
Typograf.addRule({
  name: 'ru/dash/izpod',
  handler: function handler(text) {
    var re = new RegExp(Typograf.getData('ru/dashBefore') + '(Ð|Ð¸)Ð· Ð¿Ð¾Ð´' + Typograf.getData('ru/dashAfter'), 'g');
    return text.replace(re, '$1$2Ð·-Ð¿Ð¾Ð´');
  }
});
Typograf.addRule({
  name: 'ru/dash/izza',
  handler: function handler(text) {
    var re = new RegExp(Typograf.getData('ru/dashBefore') + '(Ð|Ð¸)Ð· Ð·Ð°' + Typograf.getData('ru/dashAfter'), 'g');
    return text.replace(re, '$1$2Ð·-Ð·Ð°');
  }
});
Typograf.addRule({
  name: 'ru/dash/ka',
  handler: function handler(text) {
    var re = new RegExp('([a-ÑÑ]+) ÐºÐ°(ÑÑ)?' + Typograf.getData('ru/dashAfter'), 'g');
    return text.replace(re, '$1-ÐºÐ°$2');
  }
});
Typograf.addRule({
  name: 'ru/dash/koe',
  handler: function handler(text) {
    var re = new RegExp(Typograf.getData('ru/dashBefore') + '([ÐÐº]Ð¾[ÐµÐ¹])\\s([Ð°-ÑÑ]{3,})' + Typograf.getData('ru/dashAfter'), 'g');
    return text.replace(re, '$1$2-$3');
  }
});
Typograf.addRule({
  name: 'ru/dash/main',
  index: '-5',
  handler: function handler(text) {
    var dashes = Typograf.getData('common/dash');
    var re = new RegExp("([ \xA0])(" + dashes + ")([ \xA0\\n])", 'g');
    return text.replace(re, "\xA0\u2014$3");
  }
});
Typograf.addRule({
  name: 'ru/dash/month',
  handler: function handler(text, settings) {
    var months = '(' + Typograf.getData('ru/month') + ')';
    var monthsPre = '(' + Typograf.getData('ru/monthPreCase') + ')';
    var dashes = Typograf.getData('common/dash');
    var re = new RegExp(months + ' ?(' + dashes + ') ?' + months, 'gi');
    var rePre = new RegExp(monthsPre + ' ?(' + dashes + ') ?' + monthsPre, 'gi');
    var newSubStr = '$1' + settings.dash + '$3';
    return text.replace(re, newSubStr).replace(rePre, newSubStr);
  },
  settings: {
    dash: "\u2013" // &ndash;

  }
});
Typograf.addRule({
  name: 'ru/dash/surname',
  handler: function handler(text) {
    var re = new RegExp('([Ð-Ð¯Ð][Ð°-ÑÑ]+)\\s-([Ð°-ÑÑ]{1,3})(?![^Ð°-ÑÑ]|$)', 'g');
    return text.replace(re, "$1\xA0\u2014$2");
  }
});
Typograf.addRule({
  name: 'ru/dash/taki',
  handler: function handler(text) {
    var re = new RegExp('(Ð²ÐµÑÐ½Ð¾|Ð´Ð¾Ð²Ð¾Ð»ÑÐ½Ð¾|Ð¾Ð¿ÑÑÑ|Ð¿ÑÑÐ¼Ð¾|ÑÐ°Ðº|Ð²Ñ[ÐµÑ]|Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑÐµÐ»ÑÐ½Ð¾|Ð½ÐµÑÐ¶ÐµÐ»Ð¸)\\s(ÑÐ°ÐºÐ¸)' + Typograf.getData('ru/dashAfter'), 'g');
    return text.replace(re, '$1-$2');
  }
});
Typograf.addRule({
  name: 'ru/dash/time',
  handler: function handler(text, settings) {
    var re = new RegExp(Typograf.getData('ru/dashBefore') + '(\\d?\\d:[0-5]\\d)' + Typograf.getData('common/dash') + '(\\d?\\d:[0-5]\\d)' + Typograf.getData('ru/dashAfter'), 'g');
    return text.replace(re, '$1$2' + settings.dash + '$3');
  },
  settings: {
    dash: "\u2013" // &ndash;

  }
});
Typograf.addRule({
  name: 'ru/dash/to',
  handler: function handler(text) {
    var words = ['Ð¾ÑÐºÑÐ´Ð°', 'ÐºÑÐ´Ð°', 'Ð³Ð´Ðµ', 'ÐºÐ¾Ð³Ð´Ð°', 'Ð·Ð°ÑÐµÐ¼', 'Ð¿Ð¾ÑÐµÐ¼Ñ', 'ÐºÐ°Ðº', 'ÐºÐ°ÐºÐ¾[ÐµÐ¹Ð¼]', 'ÐºÐ°ÐºÐ°Ñ', 'ÐºÐ°ÐºÐ¸[ÐµÐ¼Ñ]', 'ÐºÐ°ÐºÐ¸Ð¼Ð¸', 'ÐºÐ°ÐºÑÑ', 'ÑÑÐ¾', 'ÑÐµÐ³Ð¾', 'ÑÐµ[Ð¹Ð¼]', 'ÑÑÐ¸Ð¼?', 'ÐºÑÐ¾', 'ÐºÐ¾Ð³Ð¾', 'ÐºÐ¾Ð¼Ñ', 'ÐºÐµÐ¼'];
    var re = new RegExp('(' + words.join('|') + ')( | -|- )(ÑÐ¾|Ð»Ð¸Ð±Ð¾|Ð½Ð¸Ð±ÑÐ´Ñ)' + Typograf.getData('ru/dashAfter'), 'gi');
    return text.replace(re, '$1-$3');
  }
});
Typograf.addRule({
  name: 'ru/dash/weekday',
  handler: function handler(text, settings) {
    var part = '(' + Typograf.getData('ru/weekday') + ')';
    var re = new RegExp(part + ' ?(' + Typograf.getData('common/dash') + ') ?' + part, 'gi');
    return text.replace(re, '$1' + settings.dash + '$3');
  },
  settings: {
    dash: "\u2013" // &ndash;

  }
});
Typograf.addRule({
  name: 'ru/dash/years',
  handler: function handler(text, settings) {
    var dashes = Typograf.getData('common/dash');
    var re = new RegExp("(\\D|^)(\\d{4})[ \xA0]?(" + dashes + ")[ \xA0]?(\\d{4})(?=[ \xA0]?\u0433)", 'g');
    return text.replace(re, function ($0, $1, $2, $3, $4) {
      if (parseInt($2, 10) < parseInt($4, 10)) {
        return $1 + $2 + settings.dash + $4;
      }

      return $0;
    });
  },
  settings: {
    dash: "\u2013" // &ndash;

  }
});
Typograf.addRule({
  name: 'ru/money/currency',
  handler: function handler(text) {
    var currency = '([$â¬Â¥Ò°Â£â¤â½])';
    var space = "[ \xA0\u2009\u202F]";
    var re1 = new RegExp('(^|[\\D]{2})' + currency + ' ?([\\d.,]+(' + space + '\\d{3})*)(' + space + '?(ÑÑÑ\\.|Ð¼Ð»Ð½|Ð¼Ð»ÑÐ´|ÑÑÐ»Ð½))?', 'gm');
    var re2 = new RegExp('(^|[\\D])([\\d.,]+) ?' + currency, 'gm');
    return text.replace(re1, function ($0, $1, $2, $3, $4, $5, $6) {
      return $1 + $3 + ($6 ? "\xA0" + $6 : '') + "\xA0" + $2;
    }).replace(re2, "$1$2\xA0$3");
  },
  disabled: true
});
Typograf.addRule({
  name: 'ru/money/ruble',
  handler: function handler(text) {
    var newSubstr = "$1\xA0\u20BD";
    var commonPart = "(\\d+)( |\xA0)?(\u0440|\u0440\u0443\u0431)\\.";
    var re1 = new RegExp('^' + commonPart + '$', 'g');
    var re2 = new RegExp(commonPart + '(?=[!?,:;])', 'g');
    var re3 = new RegExp(commonPart + '(?=\\s+[A-Ð¯Ð])', 'g');
    return text.replace(re1, newSubstr).replace(re2, newSubstr).replace(re3, newSubstr + '.');
  },
  disabled: true
});
Typograf.addRule({
  name: 'ru/number/comma',
  handler: function handler(text) {
    // \u00A0 - NO-BREAK SPACE
    // \u2009 - THIN SPACE
    // \u202F - NARROW NO-BREAK SPACE
    return text.replace(/(^|\s)(\d+)\.(\d+[\u00A0\u2009\u202F ]*?[%â°Â°Ãx])/gim, '$1$2,$3');
  }
});
Typograf.addRule({
  name: 'ru/number/ordinals',
  handler: function handler(text, settings, context) {
    var re = new RegExp('(\\d[%â°]?)-(ÑÐ¹|Ð¾Ð¹|Ð°Ñ|Ð¾Ðµ|ÑÐµ|ÑÐ¼|Ð¾Ð¼|ÑÑ|Ð¾Ð³Ð¾|Ð¾Ð¼Ñ|ÑÐ¼Ð¸)(?![' + context.getData('char') + '])', 'g');
    return text.replace(re, function ($0, $1, $2) {
      var parts = {
        'Ð¾Ð¹': 'Ð¹',
        'ÑÐ¹': 'Ð¹',
        'Ð°Ñ': 'Ñ',
        'Ð¾Ðµ': 'Ðµ',
        'ÑÐµ': 'Ðµ',
        'ÑÐ¼': 'Ð¼',
        'Ð¾Ð¼': 'Ð¼',
        'ÑÑ': 'Ñ',
        'Ð¾Ð³Ð¾': 'Ð³Ð¾',
        'Ð¾Ð¼Ñ': 'Ð¼Ñ',
        'ÑÐ¼Ð¸': 'Ð¼Ð¸'
      };
      return $1 + '-' + parts[$2];
    });
  }
});

(function () {
  var classNames = ['typograf-oa-lbracket', 'typograf-oa-n-lbracket', 'typograf-oa-sp-lbracket'];
  var name = 'ru/optalign/bracket';
  Typograf.addRule({
    name: name,
    handler: function handler(text) {
      return text.replace(/( |\u00A0)\(/g, '<span class="typograf-oa-sp-lbracket">$1</span><span class="typograf-oa-lbracket">(</span>').replace(/^\(/gm, '<span class="typograf-oa-n-lbracket">(</span>');
    },
    disabled: true,
    htmlAttrs: false
  }).addInnerRule({
    name: name,
    queue: 'start',
    handler: function handler(text) {
      return Typograf._removeOptAlignTags(text, classNames);
    }
  }).addInnerRule({
    name: name,
    queue: 'end',
    handler: function handler(text) {
      return Typograf._removeOptAlignTagsFromTitle(text, classNames);
    }
  });
})();

(function () {
  var classNames = ['typograf-oa-comma', 'typograf-oa-comma-sp'];
  var name = 'ru/optalign/comma';
  Typograf.addRule({
    name: name,
    handler: function handler(text, settings, context) {
      var re = new RegExp('([' + context.getData('char') + "\\d\u0301]+), ", 'gi');
      return text.replace(re, '$1<span class="typograf-oa-comma">,</span><span class="typograf-oa-comma-sp"> </span>');
    },
    disabled: true,
    htmlAttrs: false
  }).addInnerRule({
    name: name,
    queue: 'start',
    handler: function handler(text) {
      return Typograf._removeOptAlignTags(text, classNames);
    }
  }).addInnerRule({
    name: name,
    queue: 'end',
    handler: function handler(text) {
      return Typograf._removeOptAlignTagsFromTitle(text, classNames);
    }
  });
})();

Typograf._removeOptAlignTags = function (text, classNames) {
  var re = new RegExp('<span class="(' + classNames.join('|') + ')">([^]*?)</span>', 'g');
  return text.replace(re, '$2');
};

Typograf._removeOptAlignTagsFromTitle = function (text, classNames) {
  return text.replace(/<title>[^]*?<\/title>/i, function (text) {
    return Typograf._removeOptAlignTags(text, classNames);
  });
};

(function () {
  var classNames = ['typograf-oa-lquote', 'typograf-oa-n-lquote', 'typograf-oa-sp-lquote'];
  var name = 'ru/optalign/quote';
  Typograf.addRule({
    name: name,
    handler: function handler(text) {
      var quote = this.getSetting('common/punctuation/quote', 'ru');
      var lquotes = '([' + quote.left[0] + (quote.left[1] || '') + '])';
      var reNewLine = new RegExp('(^|\n\n|' + Typograf._privateLabel + ')(' + lquotes + ')', 'g');
      var reInside = new RegExp('([^\n' + Typograf._privateLabel + "])([ \xA0\n])(" + lquotes + ')', 'gi');
      return text.replace(reNewLine, '$1<span class="typograf-oa-n-lquote">$2</span>').replace(reInside, '$1<span class="typograf-oa-sp-lquote">$2</span><span class="typograf-oa-lquote">$3</span>');
    },
    disabled: true,
    htmlAttrs: false
  }).addInnerRule({
    name: name,
    queue: 'start',
    handler: function handler(text) {
      return Typograf._removeOptAlignTags(text, classNames);
    }
  }).addInnerRule({
    name: name,
    queue: 'end',
    handler: function handler(text) {
      return Typograf._removeOptAlignTagsFromTitle(text, classNames);
    }
  });
})();

Typograf.addRule({
  name: 'ru/nbsp/abbr',
  handler: function handler(text) {
    function abbr($0, $1, $2, $3) {
      // Ð´Ð´.Ð¼Ð¼.Ð³Ð³Ð³Ð³
      if ($2 === 'Ð´Ð´' && $3 === 'Ð¼Ð¼') {
        return $0;
      } // Ð¯Ð²Ð»ÑÑÑÑÑ Ð»Ð¸ ÑÐ¾ÐºÑÐ°ÑÐµÐ½Ð¸Ñ ÑÑÑÐ»ÐºÐ¾Ð¹


      if (['ÑÑ', 'ÑÑ', 'ÑÑÑ', 'Ð¾ÑÐ³', 'ÑÐºÑ', 'Ð±Ð³', 'ÑÑÐ±'].indexOf($3) > -1) {
        return $0;
      }

      return $1 + $2 + '.' + "\xA0" + $3 + '.';
    }

    var re = new RegExp('(^|\\s|' + Typograf._privateLabel + ')([Ð°-ÑÑ]{1,3})\\. ?([Ð°-ÑÑ]{1,3})\\.', 'g');
    return text.replace(re, abbr) // ÐÐ»Ñ ÑÑÐ¾Ð¹Ð½ÑÑ ÑÐ¾ÐºÑÐ°ÑÐµÐ½Ð¸Ð¹ - Ð°.Ðµ.Ð¼.
    .replace(re, abbr);
  }
});
Typograf.addRule({
  name: 'ru/nbsp/addr',
  handler: function handler(text) {
    return text.replace(/(\s|^)(Ð´Ð¾Ð¼|Ð´\.|ÐºÐ²\.|Ð¿Ð¾Ð´\.|Ð¿-Ð´) *(\d+)/gi, "$1$2\xA0$3").replace(/(\s|^)(Ð¼ÐºÑ-Ð½|Ð¼Ðº-Ð½|Ð¼ÐºÑ\.|Ð¼ÐºÑÐ½)\s/gi, "$1$2\xA0") // Ð¼Ð¸ÐºÑÐ¾ÑÐ°Ð¹Ð¾Ð½
    .replace(/(\s|^)(ÑÑ\.) *(-?\d+)/gi, "$1$2\xA0$3").replace(/(\s|^)(\d+) +ÑÑÐ°Ð¶([^Ð°-ÑÑ]|$)/gi, "$1$2\xA0\u044D\u0442\u0430\u0436$3").replace(/(\s|^)Ð»Ð¸ÑÐµÑ\s([Ð-Ð¯]|$)/gi, "$1\u043B\u0438\u0442\u0435\u0440\xA0$2")
    /*
        Ð¾Ð±Ð»Ð°ÑÑÑ, ÐºÑÐ°Ð¹, ÑÑÐ°Ð½ÑÐ¸Ñ, Ð¿Ð¾ÑÐµÐ»Ð¾Ðº, ÑÐµÐ»Ð¾,
        Ð´ÐµÑÐµÐ²Ð½Ñ, ÑÐ»Ð¸ÑÐ°, Ð¿ÐµÑÐµÑÐ»Ð¾Ðº, Ð¿ÑÐ¾ÐµÐ·Ð´, Ð¿ÑÐ¾ÑÐ¿ÐµÐºÑ,
        Ð±ÑÐ»ÑÐ²Ð°Ñ, Ð¿Ð»Ð¾ÑÐ°Ð´Ñ, Ð½Ð°Ð±ÐµÑÐµÐ¶Ð½Ð°Ñ, ÑÐ¾ÑÑÐµ,
        ÑÑÐ¿Ð¸Ðº, Ð¾ÑÐ¸Ñ, ÐºÐ¾Ð¼Ð½Ð°ÑÐ°, ÑÑÐ°ÑÑÐ¾Ðº, Ð²Ð»Ð°Ð´ÐµÐ½Ð¸Ðµ, ÑÑÑÐ¾ÐµÐ½Ð¸Ðµ, ÐºÐ¾ÑÐ¿ÑÑ
    */
    .replace(/(\s|^)(Ð¾Ð±Ð»|ÐºÑ|ÑÑ|Ð¿Ð¾Ñ|Ñ|Ð´|ÑÐ»|Ð¿ÐµÑ|Ð¿Ñ|Ð¿Ñ-Ñ|Ð¿ÑÐ¾ÑÐ¿|Ð¿Ð»|Ð±ÑÐ»|Ð±-Ñ|Ð½Ð°Ð±|Ñ|ÑÑÐ¿|Ð¾Ñ|ÐºÐ¾Ð¼Ð½?|ÑÑ|Ð²Ð»|Ð²Ð»Ð°Ð´|ÑÑÑ|ÐºÐ¾Ñ)\. *([Ð°-ÑÑa-z\d]+)/gi, "$1$2.\xA0$3") // Ð³Ð¾ÑÐ¾Ð´
    .replace(/(\D[ \u00A0]|^)Ð³\. ?([Ð-Ð¯Ð])/gm, "$1\u0433.\xA0$2");
  }
});
Typograf.addRule({
  name: 'ru/nbsp/afterNumberSign',
  handler: function handler(text) {
    // \u2009 - THIN SPACE
    // \u202F - NARROW NO-BREAK SPACE
    return text.replace(/â[ \u00A0\u2009]?(\d|Ð¿\/Ð¿)/g, "\u2116\u202F$1");
  }
});
Typograf.addRule({
  name: 'ru/nbsp/beforeParticle',
  index: '+5',
  handler: function handler(text) {
    var particles = '(Ð»Ð¸|Ð»Ñ|Ð¶Ðµ|Ð¶|Ð±Ñ|Ð±)';
    var re1 = new RegExp('([Ð-Ð¯ÐÐ°-ÑÑ]) ' + particles + '(?=[,;:?!"ââÂ»])', 'g');
    var re2 = new RegExp("([\u0410-\u042F\u0401\u0430-\u044F\u0451])[ \xA0]" + particles + "[ \xA0]", 'g');
    return text.replace(re1, "$1\xA0$2").replace(re2, "$1\xA0$2 ");
  }
});
Typograf.addRule({
  name: 'ru/nbsp/centuries',
  handler: function handler(text) {
    var dashes = Typograf.getData('common/dash');
    var before = '(^|\\s)([VIX]+)';
    var after = '(?=[,;:?!"ââÂ»]|$)';
    var re1 = new RegExp(before + "[ \xA0]?\u0432\\.?" + after, 'gm');
    var re2 = new RegExp(before + '(' + dashes + ')' + "([VIX]+)[ \xA0]?\u0432\\.?([ \xA0]?\u0432\\.?)?" + after, 'gm');
    return text.replace(re1, "$1$2\xA0\u0432.").replace(re2, "$1$2$3$4\xA0\u0432\u0432.");
  }
});
Typograf.addRule({
  name: 'ru/nbsp/dayMonth',
  handler: function handler(text) {
    var re = new RegExp('(\\d{1,2}) (' + Typograf.getData('ru/shortMonth') + ')', 'gi');
    return text.replace(re, "$1\xA0$2");
  }
});
Typograf.addRule({
  name: 'ru/nbsp/groupNumbers',
  handler: function handler(text) {
    var re = new RegExp("(^ ?|\\D |".concat(Typograf._privateLabel, ")(\\d{1,3}([ \xA0\u202F\u2009]\\d{3})+)(?! ?[\\d-])"), 'gm');
    return text.replace(re, function ($0, $1, $2) {
      return $1 + $2.replace(/\s/g, "\u202F");
    });
  }
});
Typograf.addRule({
  name: 'ru/nbsp/initials',
  handler: function handler(text) {
    var spaces = "\xA0\u202F "; // nbsp, thinsp

    var quote = Typograf.getData('ru/quote');
    var re = new RegExp('(^|[' + spaces + quote.left + Typograf._privateLabel + '"])([Ð-Ð¯Ð])\\.[' + spaces + ']?([Ð-Ð¯Ð])\\.[' + spaces + ']?([Ð-Ð¯Ð][Ð°-ÑÑ]+)(?=[\\s.,;:?!"' + quote.right + ']|$)', 'gm');
    return text.replace(re, "$1$2.\xA0$3.\xA0$4");
  }
});
Typograf.addRule({
  name: 'ru/nbsp/m',
  index: '+5',
  handler: function handler(text) {
    var label = Typograf._privateLabel;
    var re = new RegExp('(^|[\\s,.' + label + '])' + "(\\d+)[ \xA0]?(\u043C\u043C?|\u0441\u043C|\u043A\u043C|\u0434\u043C|\u0433\u043C|mm?|km|cm|dm)([23\xB2\xB3])?([\\s.!?,;" + label + ']|$)', 'gm');
    return text.replace(re, function ($0, $1, $2, $3, $4, $5) {
      var pow = {
        '2': 'Â²',
        'Â²': 'Â²',
        '3': 'Â³',
        'Â³': 'Â³',
        '': ''
      }[$4 || ''];
      return $1 + $2 + "\xA0" + $3 + pow + ($5 === "\xA0" ? ' ' : $5);
    });
  }
});
Typograf.addRule({
  name: 'ru/nbsp/mln',
  handler: function handler(text) {
    return text.replace(/(\d) ?(ÑÑÑ|Ð¼Ð»Ð½|Ð¼Ð»ÑÐ´|ÑÑÐ»Ð½)(\.|\s|$)/gi, "$1\xA0$2$3");
  }
});
Typograf.addRule({
  name: 'ru/nbsp/ooo',
  handler: function handler(text) {
    return text.replace(/(^|[^a-ÑÑA-Ð¯Ð])(ÐÐÐ|ÐÐÐ|ÐÐÐ|ÐÐÐ|ÐÐÐÐ®Ð) /g, "$1$2\xA0");
  }
});
Typograf.addRule({
  name: 'ru/nbsp/page',
  handler: function handler(text) {
    var re = new RegExp('(^|[)\\s' + Typograf._privateLabel + '])' + '(ÑÑÑ|Ð³Ð»|ÑÐ¸Ñ|Ð¸Ð»Ð»?|ÑÑ|Ð¿|c)\\. *(\\d+)([\\s.,?!;:]|$)', 'gim');
    return text.replace(re, "$1$2.\xA0$3$4");
  }
});
Typograf.addRule({
  name: 'ru/nbsp/ps',
  handler: function handler(text) {
    var re = new RegExp('(^|\\s|' + Typograf._privateLabel + ")[p\u0437]\\.[ \xA0]?([p\u0437]\\.[ \xA0]?)?[s\u044B]\\.:? ", 'gim');
    return text.replace(re, function ($0, $1, $2) {
      return $1 + ($2 ? "P.\xA0P.\xA0S. " : "P.\xA0S. ");
    });
  }
});
Typograf.addRule({
  name: 'ru/nbsp/rubleKopek',
  handler: function handler(text) {
    return text.replace(/(\d) ?(?=(ÑÑÐ±|ÐºÐ¾Ð¿)\.)/g, "$1\xA0");
  }
});
Typograf.addRule({
  name: 'ru/nbsp/see',
  handler: function handler(text) {
    var re = new RegExp('(^|\\s|' + Typograf._privateLabel + "|\\()(\u0441\u043C|\u0438\u043C)\\.[ \xA0]?([\u0430-\u044F\u04510-9a-z]+)([\\s.,?!]|$)", 'gi');
    return text.replace(re, function ($0, $1, $2, $3, $4) {
      return ($1 === "\xA0" ? ' ' : $1) + $2 + ".\xA0" + $3 + $4;
    });
  }
});
Typograf.addRule({
  name: 'ru/nbsp/year',
  handler: function handler(text) {
    return text.replace(/(^|\D)(\d{4}) ?Ð³([ ,;.\n]|$)/g, "$1$2\xA0\u0433$3");
  }
});
Typograf.addRule({
  name: 'ru/nbsp/years',
  index: '+5',
  handler: function handler(text) {
    var dashes = Typograf.getData('common/dash');
    var re = new RegExp('(^|\\D)(\\d{4})(' + dashes + ")(\\d{4})[ \xA0]?\u0433\\.?([ \xA0]?\u0433\\.)?(?=[,;:?!\"\u2018\u201C\xBB\\s]|$)", 'gm');
    return text.replace(re, "$1$2$3$4\xA0\u0433\u0433.");
  }
});
Typograf.addRule({
  name: 'ru/other/accent',
  handler: function handler(text) {
    return text.replace(/([Ð°-ÑÑ])([ÐÐÐÐÐÐ£Ð«Ð­Ð®Ð¯])([^Ð-Ð¯Ð\w]|$)/g, function ($0, $1, $2, $3) {
      return $1 + $2.toLowerCase() + "\u0301" + $3;
    });
  },
  disabled: true
});

(function () {
  var defaultCityCodeLength = 5;
  var countryCode = '7';
  var exceptions = [];
  var exceptionsMax = 8;
  var exceptionsMin = 2;
  [4162, 416332, 8512, 851111, 4722, 4725, 391379, 8442, 4732, 4152, 4154451, 4154459, 4154455, 41544513, 8142, 8332, 8612, 8622, 3525, 812, 8342, 8152, 3812, 4862, 3422, 342633, 8112, 9142, 8452, 3432, 3434, 3435, 4812, 8432, 8439, 3822, 4872, 3412, 3511, 3512, 3022, 4112, 4852, 4855, 3852, 3854, 8182, 818, 90, 3472, 4741, 4764, 4832, 4922, 8172, 8202, 8722, 4932, 493, 3952, 3951, 3953, 411533, 4842, 3842, 3843, 8212, 4942, '39131-39179', '39190-39199', 391, 4712, 4742, 8362, 495, 499, 4966, 4964, 4967, 498, 8312, 8313, 3832, 383612, 3532, 8412, 4232, 423370, 423630, 8632, 8642, 8482, 4242, 8672, 8652, 4752, 4822, 482502, 4826300, 3452, 8422, 4212, 3466, 3462, 8712, 8352, '901-934', '936-939', '950-953', 958, '960-969', '977-989', '991-997', 999].forEach(function (num) {
    if (typeof num === 'string') {
      var buf = num.split('-');

      for (var i = +buf[0]; i <= +buf[1]; i++) {
        exceptions.push(i);
      }
    } else {
      exceptions.push(num);
    }
  });

  function phone(num) {
    var firstSym = num[0];
    var cityCode = '';
    var hasPlusWithCode;
    var hasEight;

    if (num.length < 8) {
      return phoneBlocks(num);
    } // 8 495 123-45-67, +7 495 123-45-67


    if (num.length > 10) {
      if (firstSym === '+') {
        if (num[1] === countryCode) {
          hasPlusWithCode = true;
          num = num.substr(2);
        } else {
          return num;
        }
      } else if (firstSym === '8') {
        hasEight = true;
        num = num.substr(1);
      }
    }

    for (var cityCodeLen = exceptionsMax; cityCodeLen >= exceptionsMin; cityCodeLen--) {
      var code = +num.substr(0, cityCodeLen);

      if (exceptions.indexOf(code) > -1) {
        cityCode = num.substr(0, cityCodeLen);
        num = num.substr(cityCodeLen);
        break;
      }
    }

    if (!cityCode) {
      cityCode = num.substr(0, defaultCityCodeLength);
      num = num.substr(defaultCityCodeLength);
    }

    return (hasPlusWithCode ? '+' + countryCode + "\xA0" : '') + (hasEight ? "8\xA0" : '') + prepareCode(cityCode) + "\xA0" + phoneBlocks(num);
  }

  function prepareCode(code) {
    var numCode = +code;
    var len = code.length;
    var result = [code];
    var withoutBrackets = false;

    if (len > 3) {
      switch (len) {
        case 4:
          result = [code.substr(0, 2), code.substr(2, 2)];
          break;

        case 5:
          result = [code.substr(0, 3), code.substr(3, 3)];
          break;

        case 6:
          result = [code.substr(0, 2), code.substr(2, 2), code.substr(4, 2)];
          break;
      }
    } else {
      // ÐÐ¾Ð±Ð¸Ð»ÑÐ½ÑÐµ Ð¸ Ð¼Ð¾ÑÐºÐ¾Ð²ÑÐºÐ¸Ðµ Ð½Ð¾Ð¼ÐµÑÐ° Ð±ÐµÐ· ÑÐºÐ¾Ð±Ð¾Ðº
      withoutBrackets = numCode > 900 && numCode <= 999 || numCode === 495 || numCode === 499;
    }

    result = result.join('-');
    return withoutBrackets ? result : '(' + result + ')';
  }

  function phoneBlocks(num) {
    var add = '';

    if (num.length % 2) {
      add = num[0];
      add += num.length <= 5 ? '-' : '';
      num = num.substr(1, num.length - 1);
    }

    return add + num.split(/(?=(?:\d\d)+$)/).join('-');
  }

  function clearPhone(text) {
    return text.replace(/[^\d+]/g, '');
  }

  Typograf.addRule({
    name: 'ru/other/phone-number',
    live: false,
    handler: function handler(text) {
      var tag = Typograf._privateLabel;
      var re = new RegExp('(^|,| |' + tag + ")(\\+7[\\d\\(\\) \xA0-]{10,18})(?=,|;|" + tag + '|$)', 'gm');
      return text.replace(re, function ($0, $1, $2) {
        var buf = clearPhone($2);
        return buf.length === 12 ? $1 + phone(buf) : $0;
      }).replace(/(^|[^Ð°-ÑÑ])([âââð ðð±]|Ñ\.|ÑÐµÐ»\.|Ñ\.|Ð¼Ð¾Ð±\.|ÑÐ°ÐºÑ|ÑÐ¾ÑÐ¾Ð²ÑÐ¹|Ð¼Ð¾Ð±Ð¸Ð»ÑÐ½ÑÐ¹|ÑÐµÐ»ÐµÑÐ¾Ð½)(:?\s*?)([+\d(][\d \u00A0\-()]{3,}\d)/gi, function ($0, $1, $2, $3, $4) {
        var buf = clearPhone($4);

        if (buf.length >= 5) {
          return $1 + $2 + $3 + phone(buf);
        }

        return $0;
      });
    }
  });
})();

Typograf.addRule({
  name: 'ru/punctuation/ano',
  handler: function handler(text) {
    var re = new RegExp("([^!?,:;\\-\u2012\u2013\u2014\\s])(\\s+)(\u0430|\u043D\u043E)(?= |\xA0|\\n)", 'g');
    return text.replace(re, '$1,$2$3');
  },
  // ÐÐ°Ð¿ÑÑÐ°Ñ Ð¼Ð¾Ð¶ÐµÑ Ð¸Ð´ÑÐ¸ Ð¿Ð¾ÑÐ»Ðµ ÑÑÑÐ»ÐºÐ¸.
  queue: 'hide-safe-tags-html'
});
Typograf.addRule({
  name: 'ru/punctuation/exclamation',
  live: false,
  handler: function handler(text) {
    return text.replace(/(^|[^!])!{2}($|[^!])/gm, '$1!$2').replace(/(^|[^!])!{4}($|[^!])/gm, '$1!!!$2');
  }
});
Typograf.addRule({
  name: 'ru/punctuation/exclamationQuestion',
  index: '+5',
  handler: function handler(text) {
    var re = new RegExp('(^|[^!])!\\?([^?]|$)', 'g');
    return text.replace(re, '$1?!$2');
  }
});
Typograf.addRule({
  name: 'ru/punctuation/hellipQuestion',
  handler: function handler(text) {
    return text.replace(/(^|[^.])(\.\.\.|â¦),/g, '$1â¦').replace(/(!|\?)(\.\.\.|â¦)(?=[^.]|$)/g, '$1..');
  }
});
Typograf.addRule({
  name: 'ru/space/afterHellip',
  handler: function handler(text) {
    return text.replace(/([Ð°-ÑÑ])(\.\.\.|â¦)([Ð-Ð¯Ð])/g, '$1$2 $3').replace(/([?!]\.\.)([Ð°-ÑÑa-z])/gi, '$1 $2');
  }
});
Typograf.addRule({
  name: 'ru/space/year',
  handler: function handler(text, settings, context) {
    var re = new RegExp("(^| |\xA0)(\\d{3,4})(\u0433\u043E\u0434([\u0430\u0443\u0435]|\u043E\u043C)?)([^" + context.getData('char') + ']|$)', 'g');
    return text.replace(re, '$1$2 $3$5');
  }
});
Typograf.addRule({
  name: 'ru/symbols/NN',
  handler: function handler(text) {
    return text.replace(/ââ/g, 'â');
  }
});

(function () {
  var replacements = {
    A: 'Ð',
    // Latin: Russian
    a: 'Ð°',
    B: 'Ð',
    E: 'Ð',
    e: 'Ðµ',
    K: 'Ð',
    M: 'Ð',
    H: 'Ð',
    O: 'Ð',
    o: 'Ð¾',
    P: 'Ð ',
    p: 'Ñ',
    C: 'Ð¡',
    c: 'Ñ',
    T: 'Ð¢',
    y: 'Ñ',
    X: 'Ð¥',
    x: 'Ñ'
  };
  var keys = Object.keys(replacements).join('');
  Typograf.addRule({
    name: 'ru/typo/switchingKeyboardLayout',
    handler: function handler(text) {
      var re = new RegExp('([' + keys + ']{1,3})(?=[Ð-Ð¯ÐÐ°-ÑÑ]+?)', 'g');
      return text.replace(re, function (str, $1) {
        var result = '';

        for (var i = 0; i < $1.length; i++) {
          result += replacements[$1[i]];
        }

        return result;
      });
    }
  });
})();

var titles = {
  "common/html/e-mail": {
    "en-US": "Placement of links for e-mail",
    "ru": "Ð Ð°ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ° ÑÑÑÐ»Ð¾Ðº Ð´Ð»Ñ ÑÐ». Ð¿Ð¾ÑÑÑ"
  },
  "common/html/escape": {
    "en-US": "Escaping HTML",
    "ru": "Ð­ÐºÑÐ°Ð½Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ HTML"
  },
  "common/html/nbr": {
    "en-US": "Replacement line break on <br/>",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° Ð¿ÐµÑÐµÐ²Ð¾Ð´Ð° ÑÑÑÐ¾ÐºÐ¸ Ð½Ð° <br/>"
  },
  "common/html/p": {
    "en-US": "Placement of paragraph",
    "ru": "Ð Ð°ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð°Ð±Ð·Ð°ÑÐµÐ²"
  },
  "common/html/processingAttrs": {
    "en-US": "Processing HTML attributes",
    "ru": "Ð¢Ð¸Ð¿Ð¾Ð³ÑÐ°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ HTML-Ð°ÑÑÐ¸Ð±ÑÑÐ¾Ð²"
  },
  "common/html/quot": {
    "common": "&â quot; â \""
  },
  "common/html/stripTags": {
    "en-US": "Removing HTML-tags",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ HTML-ÑÐµÐ³Ð¾Ð²"
  },
  "common/html/url": {
    "en-US": "Placement of links",
    "ru": "Ð Ð°ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ° ÑÑÑÐ»Ð¾Ðº"
  },
  "common/nbsp/afterNumber": {
    "en-US": "Non-breaking space between number and word",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¼ÐµÐ¶Ð´Ñ ÑÐ¸ÑÐ»Ð¾Ð¼ Ð¸ ÑÐ»Ð¾Ð²Ð¾Ð¼"
  },
  "common/nbsp/afterParagraphMark": {
    "en-US": "Non-breaking space after Â¶",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿Ð¾ÑÐ»Ðµ Â¶"
  },
  "common/nbsp/afterSectionMark": {
    "en-US": "Non-breaking space after Â§",
    "ru": "ÐÐµÑÐ°Ð·. ÑÐ·ÐºÐ¸Ð¹ Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿Ð¾ÑÐ»Ðµ Â§"
  },
  "common/nbsp/afterShortWord": {
    "en-US": "Non-breaking space after short word",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿Ð¾ÑÐ»Ðµ ÐºÐ¾ÑÐ¾ÑÐºÐ¾Ð³Ð¾ ÑÐ»Ð¾Ð²Ð°"
  },
  "common/nbsp/beforeShortLastNumber": {
    "en-US": "Non-breaking space before number (maximum 2 digits) at end of sentence",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿ÐµÑÐµÐ´ ÑÐ¸ÑÐ»Ð¾Ð¼ (Ð½Ðµ Ð±Ð¾Ð»ÐµÐµ 2 ÑÐ¸ÑÑ) Ð² ÐºÐ¾Ð½ÑÐµ Ð¿ÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ñ"
  },
  "common/nbsp/beforeShortLastWord": {
    "en-US": "Non-breaking space before last short word in sentence",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿ÐµÑÐµÐ´ Ð¿Ð¾ÑÐ»ÐµÐ´Ð½Ð¸Ð¼ ÐºÐ¾ÑÐ¾ÑÐºÐ¸Ð¼ ÑÐ»Ð¾Ð²Ð¾Ð¼ Ð² Ð¿ÑÐµÐ´Ð»Ð¾Ð¶ÐµÐ½Ð¸Ð¸"
  },
  "common/nbsp/dpi": {
    "en-US": "Non-breaking space before lpi and dpi",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿ÐµÑÐµÐ´ lpi Ð¸ dpi"
  },
  "common/nbsp/nowrap": {
    "en-US": "Replace non-breaking space to normal space in tags nowrap and nobr",
    "ru": "ÐÐ°Ð¼ÐµÐ½ÑÑÑ Ð½ÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð½Ð° Ð¾Ð±ÑÑÐ½ÑÐ¹ Ð¿ÑÐ¾Ð±ÐµÐ» Ð² ÑÐµÐ³Ð°Ñ nowrap Ð¸ nobr"
  },
  "common/nbsp/replaceNbsp": {
    "en-US": "Replacing non-breaking space on normal before text correction",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° Ð½ÐµÑÐ°Ð·ÑÑÐ²Ð½Ð¾Ð³Ð¾ Ð¿ÑÐ¾Ð±ÐµÐ»Ð° Ð½Ð° Ð¾Ð±ÑÑÐ½ÑÐ¹ Ð¿ÐµÑÐµÐ´ ÑÐ¸Ð¿Ð¾Ð³ÑÐ°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸ÐµÐ¼"
  },
  "common/number/fraction": {
    "common": "1/2 â Â½, 1/4 â Â¼, 3/4 â Â¾"
  },
  "common/number/mathSigns": {
    "common": "!= â â , <= â â¤, >= â â¥, ~= â â, +- â Â±"
  },
  "common/number/times": {
    "common": "x â Ã (10 x 5 â 10Ã5)"
  },
  "common/other/delBOM": {
    "en-US": "Delete character BOM (Byte Order Mark)",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð° BOM (Byte Order Mark)"
  },
  "common/other/repeatWord": {
    "en-US": "Removing repeat words",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿Ð¾Ð²ÑÐ¾ÑÐ° ÑÐ»Ð¾Ð²Ð°"
  },
  "common/punctuation/apostrophe": {
    "en-US": "Placement of correct apostrophe",
    "ru": "Ð Ð°ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾Ð³Ð¾ Ð°Ð¿Ð¾ÑÑÑÐ¾ÑÐ°"
  },
  "common/punctuation/delDoublePunctuation": {
    "en-US": "Removing double punctuation",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð´Ð²Ð¾Ð¹Ð½Ð¾Ð¹ Ð¿ÑÐ½ÐºÑÑÐ°ÑÐ¸Ð¸"
  },
  "common/punctuation/hellip": {
    "en-US": "Replacement of three points by ellipsis",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° ÑÑÑÑ ÑÐ¾ÑÐµÐº Ð½Ð° Ð¼Ð½Ð¾Ð³Ð¾ÑÐ¾ÑÐ¸Ðµ"
  },
  "common/punctuation/quote": {
    "en-US": "Placement of quotation marks in texts",
    "ru": "Ð Ð°ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ° ÐºÐ°Ð²ÑÑÐµÐº Ð¿ÑÐ°Ð²Ð¸Ð»ÑÐ½Ð¾Ð³Ð¾ Ð²Ð¸Ð´Ð°"
  },
  "common/punctuation/quoteLink": {
    "en-US": "Removal quotes outside a link",
    "ru": "ÐÑÐ½Ð¾Ñ ÐºÐ°Ð²ÑÑÐµÐº Ð·Ð° Ð¿ÑÐµÐ´ÐµÐ»Ñ ÑÑÑÐ»ÐºÐ¸"
  },
  "common/space/afterPunctuation": {
    "en-US": "space after punctuation",
    "ru": "ÐÑÐ¾Ð±ÐµÐ» Ð¿Ð¾ÑÐ»Ðµ Ð·Ð½Ð°ÐºÐ¾Ð² Ð¿ÑÐ½ÐºÑÑÐ°ÑÐ¸Ð¸"
  },
  "common/space/beforeBracket": {
    "en-US": "Space before opening bracket",
    "ru": "ÐÑÐ¾Ð±ÐµÐ» Ð¿ÐµÑÐµÐ´ Ð¾ÑÐºÑÑÐ²Ð°ÑÑÐµÐ¹ ÑÐºÐ¾Ð±ÐºÐ¾Ð¹"
  },
  "common/space/bracket": {
    "en-US": "Remove extra spaces after opening and before closing bracket",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð»Ð¸ÑÐ½Ð¸Ñ Ð¿ÑÐ¾Ð±ÐµÐ»Ð¾Ð² Ð¿Ð¾ÑÐ»Ðµ Ð¾ÑÐºÑÑÐ²Ð°ÑÑÐµÐ¹ Ð¸ Ð¿ÐµÑÐµÐ´ Ð·Ð°ÐºÑÑÐ²Ð°ÑÑÐµÐ¹ ÑÐºÐ¾Ð±ÐºÐ¾Ð¹"
  },
  "common/space/delBeforePercent": {
    "en-US": "Remove space before %, â° and â±",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿ÑÐ¾Ð±ÐµÐ»Ð° Ð¿ÐµÑÐµÐ´ %, â° Ð¸ â±"
  },
  "common/space/delBeforePunctuation": {
    "en-US": "Remove spaces before punctuation",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿ÑÐ¾Ð±ÐµÐ»Ð¾Ð² Ð¿ÐµÑÐµÐ´ Ð·Ð½Ð°ÐºÐ°Ð¼Ð¸ Ð¿ÑÐ½ÐºÑÑÐ°ÑÐ¸Ð¸"
  },
  "common/space/delLeadingBlanks": {
    "en-US": "Remove spaces at start of line",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿ÑÐ¾Ð±ÐµÐ»Ð¾Ð² Ð² Ð½Ð°ÑÐ°Ð»Ðµ ÑÑÑÐ¾ÐºÐ¸"
  },
  "common/space/delRepeatN": {
    "en-US": "Remove duplicate line breaks (three or more)",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿Ð¾Ð²ÑÐ¾ÑÑÑÑÐ¸ÑÑÑ Ð¿ÐµÑÐµÐ½Ð¾ÑÐ¾Ð² ÑÑÑÐ¾ÐºÐ¸ (Ð¾Ñ ÑÑÑÑ Ð¸ Ð±Ð¾Ð»ÐµÐµ)"
  },
  "common/space/delRepeatSpace": {
    "en-US": "Removing duplicate spaces between characters",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿Ð¾Ð²ÑÐ¾ÑÑÑÑÐ¸ÑÑÑ Ð¿ÑÐ¾Ð±ÐµÐ»Ð¾Ð² Ð¼ÐµÐ¶Ð´Ñ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð°Ð¼Ð¸"
  },
  "common/space/delTrailingBlanks": {
    "en-US": "Remove spaces at end of line",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿ÑÐ¾Ð±ÐµÐ»Ð¾Ð² Ð² ÐºÐ¾Ð½ÑÐµ ÑÑÑÐ¾ÐºÐ¸"
  },
  "common/space/replaceTab": {
    "en-US": "Replacement of tab to 4 spaces",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° ÑÐ°Ð±Ð° Ð½Ð° 4 Ð¿ÑÐ¾Ð±ÐµÐ»Ð°"
  },
  "common/space/squareBracket": {
    "en-US": "Remove extra spaces after opening and before closing square bracket",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð»Ð¸ÑÐ½Ð¸Ñ Ð¿ÑÐ¾Ð±ÐµÐ»Ð¾Ð² Ð¿Ð¾ÑÐ»Ðµ Ð¾ÑÐºÑÑÐ²Ð°ÑÑÐµÐ¹ Ð¸ Ð¿ÐµÑÐµÐ´ Ð·Ð°ÐºÑÑÐ²Ð°ÑÑÐµÐ¹ ÐºÐ²Ð°Ð´ÑÐ°ÑÐ½Ð¾Ð¹ ÑÐºÐ¾Ð±ÐºÐ¾Ð¹"
  },
  "common/space/trimLeft": {
    "en-US": "Remove spaces and line breaks in beginning of text",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿ÑÐ¾Ð±ÐµÐ»Ð¾Ð² Ð¸ Ð¿ÐµÑÐµÐ½Ð¾ÑÐ¾Ð² ÑÑÑÐ¾Ðº Ð² Ð½Ð°ÑÐ°Ð»Ðµ ÑÐµÐºÑÑÐ°"
  },
  "common/space/trimRight": {
    "en-US": "Remove spaces and line breaks at end of text",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿ÑÐ¾Ð±ÐµÐ»Ð¾Ð² Ð¸ Ð¿ÐµÑÐµÐ½Ð¾ÑÐ¾Ð² ÑÑÑÐ¾Ðº Ð² ÐºÐ¾Ð½ÑÐµ ÑÐµÐºÑÑÐ°"
  },
  "common/symbols/arrow": {
    "common": "-> â â, <- â â"
  },
  "common/symbols/cf": {
    "en-US": "Adding Â° to C and F",
    "ru": "ÐÐ¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ Â° Ðº C Ð¸ F"
  },
  "common/symbols/copy": {
    "common": "(c) â Â©, (tm) â â¢, (r) â Â®"
  },
  "en-US/dash/main": {
    "en-US": "Replace hyphens surrounded by spaces with an em-dash",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° Ð´ÐµÑÐ¸ÑÐ° Ð½Ð° Ð´Ð»Ð¸Ð½Ð½Ð¾Ðµ ÑÐ¸ÑÐµ"
  },
  "ru/dash/centuries": {
    "en-US": "Hyphen to dash in centuries",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° Ð´ÐµÑÐ¸ÑÐ° Ð½Ð° ÑÐ¸ÑÐµ Ð² Ð²ÐµÐºÐ°Ñ"
  },
  "ru/dash/daysMonth": {
    "en-US": "Dash between days of one month",
    "ru": "Ð¢Ð¸ÑÐµ Ð¼ÐµÐ¶Ð´Ñ Ð´Ð½ÑÐ¼Ð¸ Ð¾Ð´Ð½Ð¾Ð³Ð¾ Ð¼ÐµÑÑÑÐ°"
  },
  "ru/dash/de": {
    "en-US": "Hyphen before âÐ´Ðµâ",
    "ru": "ÐÐµÑÐ¸Ñ Ð¿ÐµÑÐµÐ´ Â«Ð´ÐµÂ»"
  },
  "ru/dash/decade": {
    "en-US": "Dash in decade",
    "ru": "Ð¢Ð¸ÑÐµ Ð² Ð´ÐµÑÑÑÐ¸Ð»ÐµÑÐ¸ÑÑ, 80â90-Ðµ Ð³Ð³."
  },
  "ru/dash/directSpeech": {
    "en-US": "Dash in direct speech",
    "ru": "Ð¢Ð¸ÑÐµ Ð² Ð¿ÑÑÐ¼Ð¾Ð¹ ÑÐµÑÐ¸"
  },
  "ru/dash/izpod": {
    "en-US": "Hyphen between âÐ¸Ð·-Ð¿Ð¾Ð´â",
    "ru": "ÐÐµÑÐ¸Ñ Ð¼ÐµÐ¶Ð´Ñ Â«Ð¸Ð·-Ð¿Ð¾Ð´Â»"
  },
  "ru/dash/izza": {
    "en-US": "Hyphen between âÐ¸Ð·-Ð·Ð°â",
    "ru": "ÐÐµÑÐ¸Ñ Ð¼ÐµÐ¶Ð´Ñ Â«Ð¸Ð·-Ð·Ð°Â»"
  },
  "ru/dash/ka": {
    "en-US": "Hyphen before âÐºÐ°â and âÐºÐ°ÑÑâ",
    "ru": "ÐÐµÑÐ¸Ñ Ð¿ÐµÑÐµÐ´ Â«ÐºÐ°Â» Ð¸ Â«ÐºÐ°ÑÑÂ»"
  },
  "ru/dash/koe": {
    "en-US": "Hyphen after âÐºÐ¾Ðµâ and âÐºÐ¾Ð¹â",
    "ru": "ÐÐµÑÐ¸Ñ Ð¿Ð¾ÑÐ»Ðµ Â«ÐºÐ¾ÐµÂ» Ð¸ Â«ÐºÐ¾Ð¹Â»"
  },
  "ru/dash/main": {
    "en-US": "Replacement hyphen with dash",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° Ð´ÐµÑÐ¸ÑÐ° Ð½Ð° ÑÐ¸ÑÐµ"
  },
  "ru/dash/month": {
    "en-US": "Dash between months",
    "ru": "Ð¢Ð¸ÑÐµ Ð¼ÐµÐ¶Ð´Ñ Ð¼ÐµÑÑÑÐ°Ð¼Ð¸"
  },
  "ru/dash/surname": {
    "en-US": "Acronyms with a dash",
    "ru": "Ð¡Ð¾ÐºÑÐ°ÑÐµÐ½Ð¸Ñ Ñ Ð¿Ð¾Ð¼Ð¾ÑÑÑ ÑÐ¸ÑÐµ"
  },
  "ru/dash/taki": {
    "en-US": "Hyphen between âÐ²ÐµÑÐ½Ð¾-ÑÐ°ÐºÐ¸â and etc.",
    "ru": "ÐÐµÑÐ¸Ñ Ð¼ÐµÐ¶Ð´Ñ Â«Ð²ÐµÑÐ½Ð¾-ÑÐ°ÐºÐ¸Â» Ð¸ Ñ. Ð´."
  },
  "ru/dash/time": {
    "en-US": "Dash in time intervals",
    "ru": "Ð¢Ð¸ÑÐµ Ð² Ð¸Ð½ÑÐµÑÐ²Ð°Ð»Ð°Ñ Ð²ÑÐµÐ¼ÐµÐ½Ð¸"
  },
  "ru/dash/to": {
    "en-US": "Hyphen before âÑÐ¾â, âÐ»Ð¸Ð±Ð¾â, âÐ½Ð¸Ð±ÑÐ´Ñâ",
    "ru": "ÐÐµÑÐ¸Ñ Ð¿ÐµÑÐµÐ´ Â«ÑÐ¾Â», Â«Ð»Ð¸Ð±Ð¾Â», Â«Ð½Ð¸Ð±ÑÐ´ÑÂ»"
  },
  "ru/dash/weekday": {
    "en-US": "Dash between the days of the week",
    "ru": "Ð¢Ð¸ÑÐµ Ð¼ÐµÐ¶Ð´Ñ Ð´Ð½ÑÐ¼Ð¸ Ð½ÐµÐ´ÐµÐ»Ð¸"
  },
  "ru/dash/years": {
    "en-US": "Hyphen to dash in years",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° Ð´ÐµÑÐ¸ÑÐ° Ð½Ð° ÑÐ¸ÑÐµ Ð² Ð³Ð¾Ð´Ð°Ñ"
  },
  "ru/date/fromISO": {
    "en-US": "Converting dates YYYY-MM-DD type DD.MM.YYYY",
    "ru": "ÐÑÐµÐ¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð´Ð°Ñ YYYY-MM-DD Ðº Ð²Ð¸Ð´Ñ DD.MM.YYYY"
  },
  "ru/date/weekday": {
    "common": "2 ÐÐ°Ñ, ÐÐ¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº â 2 Ð¼Ð°Ñ, Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº"
  },
  "ru/money/currency": {
    "en-US": "Currency symbol ($, â¬, Â¥, Ò°, Â£ and â¤) after the number, $100 â 100Â $",
    "ru": "Ð¡Ð¸Ð¼Ð²Ð¾Ð» Ð²Ð°Ð»ÑÑÑ ($, â¬, Â¥, Ò°, Â£ Ð¸ â¤) Ð¿Ð¾ÑÐ»Ðµ ÑÐ¸ÑÐ»Ð°, $100 â 100Â $"
  },
  "ru/money/ruble": {
    "common": "1 ÑÑÐ±. â 1 â½"
  },
  "ru/nbsp/abbr": {
    "en-US": "Non-breaking space in abbreviations, e.g. âÑ.Â Ð´.â",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð² ÑÐ¾ÐºÑÐ°ÑÐµÐ½Ð¸ÑÑ, Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ, Ð² Â«Ñ.Â Ð´.Â»"
  },
  "ru/nbsp/addr": {
    "en-US": "Placement of non-breaking space after âÐ³.â, âÐ¾Ð±Ð».â, âÑÐ».â, âÐ¿Ñ.â, âÐºÐ².â et al.",
    "ru": "Ð Ð°ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð½ÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ»Ð° Ð¿Ð¾ÑÐ»Ðµ Â«Ð³.Â», Â«Ð¾Ð±Ð».Â», Â«ÑÐ».Â», Â«Ð¿Ñ.Â», Â«ÐºÐ².Â» Ð¸ Ð´Ñ."
  },
  "ru/nbsp/afterNumberSign": {
    "en-US": "Non-breaking thin space after â",
    "ru": "ÐÐµÑÐ°Ð·. ÑÐ·ÐºÐ¸Ð¹ Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿Ð¾ÑÐ»Ðµ â"
  },
  "ru/nbsp/beforeParticle": {
    "en-US": "Non-breaking space before âÐ»Ð¸â, âÐ»Ñâ, âÐ¶Ðµâ, âÐ±Ñâ, âÐ±â",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿ÐµÑÐµÐ´ Â«Ð»Ð¸Â», Â«Ð»ÑÂ», Â«Ð¶ÐµÂ», Â«Ð±ÑÂ», Â«Ð±Â»"
  },
  "ru/nbsp/centuries": {
    "en-US": "Remove spaces and extra points in âÐ²Ð².â",
    "ru": "Ð£Ð´Ð°Ð»ÐµÐ½Ð¸Ðµ Ð¿ÑÐ¾Ð±ÐµÐ»Ð¾Ð² Ð¸ Ð»Ð¸ÑÐ½Ð¸Ñ ÑÐ¾ÑÐµÐº Ð² Â«Ð²Ð².Â»"
  },
  "ru/nbsp/dayMonth": {
    "en-US": "Non-breaking space between number and month",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¼ÐµÐ¶Ð´Ñ ÑÐ¸ÑÐ»Ð¾Ð¼ Ð¸ Ð¼ÐµÑÑÑÐµÐ¼"
  },
  "ru/nbsp/groupNumbers": {
    "en-US": "Replacement space on a narrow non-breaking space in groups of numbers",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° Ð¿ÑÐ¾Ð±ÐµÐ»Ð° Ð½Ð° Ð½ÐµÑÐ°Ð·. ÑÐ·ÐºÐ¸Ð¹ Ð¿ÑÐ¾Ð±ÐµÐ» Ð² Ð³ÑÑÐ¿Ð¿Ð°Ñ ÑÐ¸ÑÐµÐ»"
  },
  "ru/nbsp/initials": {
    "en-US": "Binding of initials to the name",
    "ru": "ÐÑÐ¸Ð²ÑÐ·ÐºÐ° Ð¸Ð½Ð¸ÑÐ¸Ð°Ð»Ð¾Ð² Ðº ÑÐ°Ð¼Ð¸Ð»Ð¸Ð¸"
  },
  "ru/nbsp/m": {
    "en-US": "m2 â Ð¼Â², m3 â Ð¼Â³ and non-breaking space",
    "ru": "Ð¼2 â Ð¼Â², Ð¼3 â Ð¼Â³ Ð¸ Ð½ÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ»"
  },
  "ru/nbsp/mln": {
    "en-US": "Non-breaking space between number and âÑÑÑ.â, âÐ¼Ð»Ð½â, âÐ¼Ð»ÑÐ´â and âÑÑÐ»Ð½â",
    "ru": "ÐÐµÑÐ°Ð·Ñ. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¼ÐµÐ¶Ð´Ñ ÑÐ¸ÑÐ»Ð¾Ð¼ Ð¸ Â«ÑÑÑ.Â», Â«Ð¼Ð»Ð½Â», Â«Ð¼Ð»ÑÐ´Â» Ð¸ Â«ÑÑÐ»Ð½Â»"
  },
  "ru/nbsp/ooo": {
    "en-US": "Non-breaking space after âOOO, ÐÐÐ, ÐÐÐ, ÐÐÐ, ÐÐÐÐ®Ðâ",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿Ð¾ÑÐ»Ðµ OOO, ÐÐÐ, ÐÐÐ, ÐÐÐ Ð¸ ÐÐÐÐ®Ð"
  },
  "ru/nbsp/page": {
    "en-US": "Non-breaking space after âÑÑÑ.â, âÐ³Ð».â, âÑÐ¸Ñ.â, âÐ¸Ð»Ð».â",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿Ð¾ÑÐ»Ðµ Â«ÑÑÑ.Â», Â«Ð³Ð».Â», Â«ÑÐ¸Ñ.Â», Â«Ð¸Ð»Ð».Â»"
  },
  "ru/nbsp/ps": {
    "en-US": "Non-breaking space in P.Â S. and P.Â P.Â S.",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð² P.Â S. Ð¸ P.Â P.Â S."
  },
  "ru/nbsp/rubleKopek": {
    "en-US": "Not once. space before the ârubâ and âcop.â",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿ÐµÑÐµÐ´ Â«ÑÑÐ±.Â» Ð¸ Â«ÐºÐ¾Ð¿.Â»"
  },
  "ru/nbsp/see": {
    "en-US": "Non-breaking space after abbreviation Â«ÑÐ¼.Â» and Â«Ð¸Ð¼.Â»",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿Ð¾ÑÐ»Ðµ ÑÐ¾ÐºÑÐ°ÑÐµÐ½Ð¸Ð¹ Â«ÑÐ¼.Â» Ð¸ Â«Ð¸Ð¼.Â»"
  },
  "ru/nbsp/year": {
    "en-US": "Non-breaking space before XXXX Ð³. (2012 Ð³.)",
    "ru": "ÐÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ» Ð¿Ð¾ÑÐ»Ðµ XXXX Ð³. (2012 Ð³.)"
  },
  "ru/nbsp/years": {
    "en-US": "Ð³.Ð³. â Ð³Ð³. and non-breaking space",
    "ru": "Ð³.Ð³. â Ð³Ð³. Ð¸ Ð½ÐµÑÐ°Ð·. Ð¿ÑÐ¾Ð±ÐµÐ»"
  },
  "ru/number/comma": {
    "en-US": "Commas in numbers",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° ÑÐ¾ÑÐºÐ¸ Ð½Ð° Ð·Ð°Ð¿ÑÑÑÑ Ð² ÑÐ¸ÑÐ»Ð°Ñ"
  },
  "ru/number/ordinals": {
    "common": "N-ÑÐ¹, -Ð¾Ð¹, -Ð°Ñ, -Ð¾Ðµ, -ÑÐµ, -ÑÐ¼, -Ð¾Ð¼, -ÑÑ â N-Ð¹, -Ñ, -Ðµ, -Ð¼, -Ñ (25-Ð¹)"
  },
  "ru/optalign/bracket": {
    "en-US": "for opening bracket",
    "ru": "Ð´Ð»Ñ Ð¾ÑÐºÑÑÐ²Ð°ÑÑÐµÐ¹ ÑÐºÐ¾Ð±ÐºÐ¸"
  },
  "ru/optalign/comma": {
    "en-US": "for comma",
    "ru": "Ð´Ð»Ñ Ð·Ð°Ð¿ÑÑÐ¾Ð¹"
  },
  "ru/optalign/quote": {
    "en-US": "for opening quotation marks",
    "ru": "Ð´Ð»Ñ Ð¾ÑÐºÑÑÐ²Ð°ÑÑÐµÐ¹ ÐºÐ°Ð²ÑÑÐºÐ¸"
  },
  "ru/other/accent": {
    "en-US": "Replacement capital letters to lowercase with addition of accent",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° Ð·Ð°Ð³Ð»Ð°Ð²Ð½Ð¾Ð¹ Ð±ÑÐºÐ²Ñ Ð½Ð° ÑÑÑÐ¾ÑÐ½ÑÑ Ñ Ð´Ð¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸ÐµÐ¼ ÑÐ´Ð°ÑÐµÐ½Ð¸Ñ"
  },
  "ru/other/phone-number": {
    "en-US": "Formatting phone numbers",
    "ru": "Ð¤Ð¾ÑÐ¼Ð°ÑÐ¸ÑÐ¾Ð²Ð°Ð½Ð¸Ðµ ÑÐµÐ»ÐµÑÐ¾Ð½Ð½ÑÑ Ð½Ð¾Ð¼ÐµÑÐ¾Ð²"
  },
  "ru/punctuation/ano": {
    "en-US": "Placement of commas before âÐ°â and âÐ½Ð¾â",
    "ru": "Ð Ð°ÑÑÑÐ°Ð½Ð¾Ð²ÐºÐ° Ð·Ð°Ð¿ÑÑÑÑ Ð¿ÐµÑÐµÐ´ Â«Ð°Â» Ð¸ Â«Ð½Ð¾Â»"
  },
  "ru/punctuation/exclamation": {
    "common": "!! â !"
  },
  "ru/punctuation/exclamationQuestion": {
    "common": "!? â ?!"
  },
  "ru/punctuation/hellipQuestion": {
    "common": "Â«?â¦Â» â Â«?..Â», Â«!â¦Â» â Â«!..Â», Â«â¦,Â» â Â«â¦Â»"
  },
  "ru/space/afterHellip": {
    "en-US": "Space after â...â, â!..â and â?..â",
    "ru": "ÐÑÐ¾Ð±ÐµÐ» Ð¿Ð¾ÑÐ»Ðµ Â«...Â», Â«!..Â» Ð¸ Â«?..Â»"
  },
  "ru/space/year": {
    "en-US": "Space between number and word âÐ³Ð¾Ð´â",
    "ru": "ÐÑÐ¾Ð±ÐµÐ» Ð¼ÐµÐ¶Ð´Ñ ÑÐ¸ÑÐ»Ð¾Ð¼ Ð¸ ÑÐ»Ð¾Ð²Ð¾Ð¼ Â«Ð³Ð¾Ð´Â»"
  },
  "ru/symbols/NN": {
    "common": "ââ â â"
  },
  "ru/typo/switchingKeyboardLayout": {
    "en-US": "Replacement of Latin letters in Russian. Typos occur when you switch keyboard layouts",
    "ru": "ÐÐ°Ð¼ÐµÐ½Ð° Ð»Ð°ÑÐ¸Ð½ÑÐºÐ¸Ñ Ð±ÑÐºÐ² Ð½Ð° ÑÑÑÑÐºÐ¸Ðµ. ÐÐ¿ÐµÑÐ°ÑÐºÐ¸, Ð²Ð¾Ð·Ð½Ð¸ÐºÐ°ÑÑÐ¸Ðµ Ð¿ÑÐ¸ Ð¿ÐµÑÐµÐºÐ»ÑÑÐµÐ½Ð¸Ð¸ ÐºÐ»Ð°Ð²Ð¸Ð°ÑÑÑÐ½Ð¾Ð¹ ÑÐ°ÑÐºÐ»Ð°Ð´ÐºÐ¸"
  }
};

var groups = [{
  "name": "punctuation",
  "title": {
    "en-US": "Punctuation",
    "ru": "ÐÑÐ½ÐºÑÑÐ°ÑÐ¸Ñ"
  }
}, {
  "name": "optalign",
  "title": {
    "en-US": "Hanging punctuation",
    "ru": "ÐÐ¸ÑÑÑÐ°Ñ Ð¿ÑÐ½ÐºÑÑÐ°ÑÐ¸Ñ"
  }
}, {
  "name": "dash",
  "title": {
    "en-US": "Dash and hyphen",
    "ru": "Ð¢Ð¸ÑÐµ Ð¸ Ð´ÐµÑÐ¸Ñ"
  }
}, {
  "name": "nbsp",
  "title": {
    "en-US": "Non-breaking space",
    "ru": "ÐÐµÑÐ°Ð·ÑÑÐ²Ð½ÑÐ¹ Ð¿ÑÐ¾Ð±ÐµÐ»"
  }
}, {
  "name": "space",
  "title": {
    "en-US": "Space and line ending",
    "ru": "ÐÑÐ¾Ð±ÐµÐ» Ð¸ Ð¾ÐºÐ¾Ð½ÑÐ°Ð½Ð¸Ðµ ÑÑÑÐ¾ÐºÐ¸"
  }
}, {
  "name": "html",
  "title": {
    "en-US": "HTML",
    "ru": "HTML"
  }
}, {
  "name": "date",
  "title": {
    "en-US": "Date",
    "ru": "ÐÐ°ÑÐ°"
  }
}, {
  "name": "money",
  "title": {
    "en-US": "Money",
    "ru": "ÐÐµÐ½ÑÐ³Ð¸"
  }
}, {
  "name": "number",
  "title": {
    "en-US": "Numbers and mathematical expressions",
    "ru": "Ð§Ð¸ÑÐ»Ð° Ð¸ Ð¼Ð°ÑÐµÐ¼Ð°ÑÐ¸ÑÐµÑÐºÐ¸Ðµ Ð²ÑÑÐ°Ð¶ÐµÐ½Ð¸Ñ"
  }
}, {
  "name": "symbols",
  "title": {
    "en-US": "Symbols and signs",
    "ru": "Ð¡Ð¸Ð¼Ð²Ð¾Ð»Ñ Ð¸ Ð·Ð½Ð°ÐºÐ¸"
  }
}, {
  "name": "typo",
  "title": {
    "en-US": "Typos",
    "ru": "ÐÐ¿ÐµÑÐ°ÑÐºÐ¸"
  }
}, {
  "name": "other",
  "title": {
    "en-US": "Other",
    "ru": "ÐÑÐ¾ÑÐµÐµ"
  }
}];

Typograf.titles = titles;
Typograf.groups = groups;

return Typograf;

})));
